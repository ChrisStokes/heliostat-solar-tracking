// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/field_layout.proto

#ifndef PROTOBUF_src_2ffield_5flayout_2eproto__INCLUDED
#define PROTOBUF_src_2ffield_5flayout_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace energy_rec {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_src_2ffield_5flayout_2eproto();
void protobuf_AssignDesc_src_2ffield_5flayout_2eproto();
void protobuf_ShutdownFile_src_2ffield_5flayout_2eproto();

class FieldLayout;
class FieldLayout_Aperture;
class FieldLayout_EulerAnglesIntrinsicZXZ;
class FieldLayout_Heliostat;
class FieldLayout_HeliostatBlock;
class FieldLayout_HeliostatType;
class FieldLayout_HeliostatType_Vertex;
class FieldLayout_ManualSunConfig;
class FieldLayout_Receiver;
class FieldLayout_Sun;
class FieldLayout_Vector;

enum FieldLayout_Vector_CoordinateSystem {
  FieldLayout_Vector_CoordinateSystem_CARTESIAN = 0,
  FieldLayout_Vector_CoordinateSystem_CYLINDRICAL = 1,
  FieldLayout_Vector_CoordinateSystem_SPHERICAL = 2,
  FieldLayout_Vector_CoordinateSystem_ASTRONOMICAL = 3
};
bool FieldLayout_Vector_CoordinateSystem_IsValid(int value);
const FieldLayout_Vector_CoordinateSystem FieldLayout_Vector_CoordinateSystem_CoordinateSystem_MIN = FieldLayout_Vector_CoordinateSystem_CARTESIAN;
const FieldLayout_Vector_CoordinateSystem FieldLayout_Vector_CoordinateSystem_CoordinateSystem_MAX = FieldLayout_Vector_CoordinateSystem_ASTRONOMICAL;
const int FieldLayout_Vector_CoordinateSystem_CoordinateSystem_ARRAYSIZE = FieldLayout_Vector_CoordinateSystem_CoordinateSystem_MAX + 1;

const ::google::protobuf::EnumDescriptor* FieldLayout_Vector_CoordinateSystem_descriptor();
inline const ::std::string& FieldLayout_Vector_CoordinateSystem_Name(FieldLayout_Vector_CoordinateSystem value) {
  return ::google::protobuf::internal::NameOfEnum(
    FieldLayout_Vector_CoordinateSystem_descriptor(), value);
}
inline bool FieldLayout_Vector_CoordinateSystem_Parse(
    const ::std::string& name, FieldLayout_Vector_CoordinateSystem* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FieldLayout_Vector_CoordinateSystem>(
    FieldLayout_Vector_CoordinateSystem_descriptor(), name, value);
}
enum FieldLayout_HeliostatType_Actuation {
  FieldLayout_HeliostatType_Actuation_DIRECT = 0,
  FieldLayout_HeliostatType_Actuation_AZI_ELE = 1,
  FieldLayout_HeliostatType_Actuation_PITCH_ROLL = 2
};
bool FieldLayout_HeliostatType_Actuation_IsValid(int value);
const FieldLayout_HeliostatType_Actuation FieldLayout_HeliostatType_Actuation_Actuation_MIN = FieldLayout_HeliostatType_Actuation_DIRECT;
const FieldLayout_HeliostatType_Actuation FieldLayout_HeliostatType_Actuation_Actuation_MAX = FieldLayout_HeliostatType_Actuation_PITCH_ROLL;
const int FieldLayout_HeliostatType_Actuation_Actuation_ARRAYSIZE = FieldLayout_HeliostatType_Actuation_Actuation_MAX + 1;

const ::google::protobuf::EnumDescriptor* FieldLayout_HeliostatType_Actuation_descriptor();
inline const ::std::string& FieldLayout_HeliostatType_Actuation_Name(FieldLayout_HeliostatType_Actuation value) {
  return ::google::protobuf::internal::NameOfEnum(
    FieldLayout_HeliostatType_Actuation_descriptor(), value);
}
inline bool FieldLayout_HeliostatType_Actuation_Parse(
    const ::std::string& name, FieldLayout_HeliostatType_Actuation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FieldLayout_HeliostatType_Actuation>(
    FieldLayout_HeliostatType_Actuation_descriptor(), name, value);
}
// ===================================================================

class FieldLayout_Vector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:energy_rec.FieldLayout.Vector) */ {
 public:
  FieldLayout_Vector();
  virtual ~FieldLayout_Vector();

  FieldLayout_Vector(const FieldLayout_Vector& from);

  inline FieldLayout_Vector& operator=(const FieldLayout_Vector& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldLayout_Vector& default_instance();

  void Swap(FieldLayout_Vector* other);

  // implements Message ----------------------------------------------

  inline FieldLayout_Vector* New() const { return New(NULL); }

  FieldLayout_Vector* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldLayout_Vector& from);
  void MergeFrom(const FieldLayout_Vector& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FieldLayout_Vector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FieldLayout_Vector_CoordinateSystem CoordinateSystem;
  static const CoordinateSystem CARTESIAN =
    FieldLayout_Vector_CoordinateSystem_CARTESIAN;
  static const CoordinateSystem CYLINDRICAL =
    FieldLayout_Vector_CoordinateSystem_CYLINDRICAL;
  static const CoordinateSystem SPHERICAL =
    FieldLayout_Vector_CoordinateSystem_SPHERICAL;
  static const CoordinateSystem ASTRONOMICAL =
    FieldLayout_Vector_CoordinateSystem_ASTRONOMICAL;
  static inline bool CoordinateSystem_IsValid(int value) {
    return FieldLayout_Vector_CoordinateSystem_IsValid(value);
  }
  static const CoordinateSystem CoordinateSystem_MIN =
    FieldLayout_Vector_CoordinateSystem_CoordinateSystem_MIN;
  static const CoordinateSystem CoordinateSystem_MAX =
    FieldLayout_Vector_CoordinateSystem_CoordinateSystem_MAX;
  static const int CoordinateSystem_ARRAYSIZE =
    FieldLayout_Vector_CoordinateSystem_CoordinateSystem_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CoordinateSystem_descriptor() {
    return FieldLayout_Vector_CoordinateSystem_descriptor();
  }
  static inline const ::std::string& CoordinateSystem_Name(CoordinateSystem value) {
    return FieldLayout_Vector_CoordinateSystem_Name(value);
  }
  static inline bool CoordinateSystem_Parse(const ::std::string& name,
      CoordinateSystem* value) {
    return FieldLayout_Vector_CoordinateSystem_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .energy_rec.FieldLayout.Vector.CoordinateSystem coordinate_system = 1;
  bool has_coordinate_system() const;
  void clear_coordinate_system();
  static const int kCoordinateSystemFieldNumber = 1;
  ::energy_rec::FieldLayout_Vector_CoordinateSystem coordinate_system() const;
  void set_coordinate_system(::energy_rec::FieldLayout_Vector_CoordinateSystem value);

  // repeated double coordinate = 2;
  int coordinate_size() const;
  void clear_coordinate();
  static const int kCoordinateFieldNumber = 2;
  double coordinate(int index) const;
  void set_coordinate(int index, double value);
  void add_coordinate(double value);
  const ::google::protobuf::RepeatedField< double >&
      coordinate() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_coordinate();

  // @@protoc_insertion_point(class_scope:energy_rec.FieldLayout.Vector)
 private:
  inline void set_has_coordinate_system();
  inline void clear_has_coordinate_system();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > coordinate_;
  int coordinate_system_;
  friend void  protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_AssignDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_ShutdownFile_src_2ffield_5flayout_2eproto();

  void InitAsDefaultInstance();
  static FieldLayout_Vector* default_instance_;
};
// -------------------------------------------------------------------

class FieldLayout_EulerAnglesIntrinsicZXZ : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ) */ {
 public:
  FieldLayout_EulerAnglesIntrinsicZXZ();
  virtual ~FieldLayout_EulerAnglesIntrinsicZXZ();

  FieldLayout_EulerAnglesIntrinsicZXZ(const FieldLayout_EulerAnglesIntrinsicZXZ& from);

  inline FieldLayout_EulerAnglesIntrinsicZXZ& operator=(const FieldLayout_EulerAnglesIntrinsicZXZ& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldLayout_EulerAnglesIntrinsicZXZ& default_instance();

  void Swap(FieldLayout_EulerAnglesIntrinsicZXZ* other);

  // implements Message ----------------------------------------------

  inline FieldLayout_EulerAnglesIntrinsicZXZ* New() const { return New(NULL); }

  FieldLayout_EulerAnglesIntrinsicZXZ* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldLayout_EulerAnglesIntrinsicZXZ& from);
  void MergeFrom(const FieldLayout_EulerAnglesIntrinsicZXZ& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FieldLayout_EulerAnglesIntrinsicZXZ* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double alpha = 1 [default = 0];
  bool has_alpha() const;
  void clear_alpha();
  static const int kAlphaFieldNumber = 1;
  double alpha() const;
  void set_alpha(double value);

  // required double beta = 2 [default = 0];
  bool has_beta() const;
  void clear_beta();
  static const int kBetaFieldNumber = 2;
  double beta() const;
  void set_beta(double value);

  // required double gamma = 3 [default = 0];
  bool has_gamma() const;
  void clear_gamma();
  static const int kGammaFieldNumber = 3;
  double gamma() const;
  void set_gamma(double value);

  // @@protoc_insertion_point(class_scope:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ)
 private:
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();
  inline void set_has_gamma();
  inline void clear_has_gamma();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double alpha_;
  double beta_;
  double gamma_;
  friend void  protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_AssignDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_ShutdownFile_src_2ffield_5flayout_2eproto();

  void InitAsDefaultInstance();
  static FieldLayout_EulerAnglesIntrinsicZXZ* default_instance_;
};
// -------------------------------------------------------------------

class FieldLayout_ManualSunConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:energy_rec.FieldLayout.ManualSunConfig) */ {
 public:
  FieldLayout_ManualSunConfig();
  virtual ~FieldLayout_ManualSunConfig();

  FieldLayout_ManualSunConfig(const FieldLayout_ManualSunConfig& from);

  inline FieldLayout_ManualSunConfig& operator=(const FieldLayout_ManualSunConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldLayout_ManualSunConfig& default_instance();

  void Swap(FieldLayout_ManualSunConfig* other);

  // implements Message ----------------------------------------------

  inline FieldLayout_ManualSunConfig* New() const { return New(NULL); }

  FieldLayout_ManualSunConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldLayout_ManualSunConfig& from);
  void MergeFrom(const FieldLayout_ManualSunConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FieldLayout_ManualSunConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .energy_rec.FieldLayout.Vector sun_vector = 1;
  bool has_sun_vector() const;
  void clear_sun_vector();
  static const int kSunVectorFieldNumber = 1;
  const ::energy_rec::FieldLayout_Vector& sun_vector() const;
  ::energy_rec::FieldLayout_Vector* mutable_sun_vector();
  ::energy_rec::FieldLayout_Vector* release_sun_vector();
  void set_allocated_sun_vector(::energy_rec::FieldLayout_Vector* sun_vector);

  // required double dni = 2;
  bool has_dni() const;
  void clear_dni();
  static const int kDniFieldNumber = 2;
  double dni() const;
  void set_dni(double value);

  // @@protoc_insertion_point(class_scope:energy_rec.FieldLayout.ManualSunConfig)
 private:
  inline void set_has_sun_vector();
  inline void clear_has_sun_vector();
  inline void set_has_dni();
  inline void clear_has_dni();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::energy_rec::FieldLayout_Vector* sun_vector_;
  double dni_;
  friend void  protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_AssignDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_ShutdownFile_src_2ffield_5flayout_2eproto();

  void InitAsDefaultInstance();
  static FieldLayout_ManualSunConfig* default_instance_;
};
// -------------------------------------------------------------------

class FieldLayout_Sun : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:energy_rec.FieldLayout.Sun) */ {
 public:
  FieldLayout_Sun();
  virtual ~FieldLayout_Sun();

  FieldLayout_Sun(const FieldLayout_Sun& from);

  inline FieldLayout_Sun& operator=(const FieldLayout_Sun& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldLayout_Sun& default_instance();

  void Swap(FieldLayout_Sun* other);

  // implements Message ----------------------------------------------

  inline FieldLayout_Sun* New() const { return New(NULL); }

  FieldLayout_Sun* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldLayout_Sun& from);
  void MergeFrom(const FieldLayout_Sun& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FieldLayout_Sun* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool automatic = 1;
  bool has_automatic() const;
  void clear_automatic();
  static const int kAutomaticFieldNumber = 1;
  bool automatic() const;
  void set_automatic(bool value);

  // optional .energy_rec.FieldLayout.Vector field_location = 2;
  bool has_field_location() const;
  void clear_field_location();
  static const int kFieldLocationFieldNumber = 2;
  const ::energy_rec::FieldLayout_Vector& field_location() const;
  ::energy_rec::FieldLayout_Vector* mutable_field_location();
  ::energy_rec::FieldLayout_Vector* release_field_location();
  void set_allocated_field_location(::energy_rec::FieldLayout_Vector* field_location);

  // repeated .energy_rec.FieldLayout.ManualSunConfig sun_config = 3;
  int sun_config_size() const;
  void clear_sun_config();
  static const int kSunConfigFieldNumber = 3;
  const ::energy_rec::FieldLayout_ManualSunConfig& sun_config(int index) const;
  ::energy_rec::FieldLayout_ManualSunConfig* mutable_sun_config(int index);
  ::energy_rec::FieldLayout_ManualSunConfig* add_sun_config();
  ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_ManualSunConfig >*
      mutable_sun_config();
  const ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_ManualSunConfig >&
      sun_config() const;

  // @@protoc_insertion_point(class_scope:energy_rec.FieldLayout.Sun)
 private:
  inline void set_has_automatic();
  inline void clear_has_automatic();
  inline void set_has_field_location();
  inline void clear_has_field_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::energy_rec::FieldLayout_Vector* field_location_;
  ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_ManualSunConfig > sun_config_;
  bool automatic_;
  friend void  protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_AssignDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_ShutdownFile_src_2ffield_5flayout_2eproto();

  void InitAsDefaultInstance();
  static FieldLayout_Sun* default_instance_;
};
// -------------------------------------------------------------------

class FieldLayout_HeliostatType_Vertex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:energy_rec.FieldLayout.HeliostatType.Vertex) */ {
 public:
  FieldLayout_HeliostatType_Vertex();
  virtual ~FieldLayout_HeliostatType_Vertex();

  FieldLayout_HeliostatType_Vertex(const FieldLayout_HeliostatType_Vertex& from);

  inline FieldLayout_HeliostatType_Vertex& operator=(const FieldLayout_HeliostatType_Vertex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldLayout_HeliostatType_Vertex& default_instance();

  void Swap(FieldLayout_HeliostatType_Vertex* other);

  // implements Message ----------------------------------------------

  inline FieldLayout_HeliostatType_Vertex* New() const { return New(NULL); }

  FieldLayout_HeliostatType_Vertex* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldLayout_HeliostatType_Vertex& from);
  void MergeFrom(const FieldLayout_HeliostatType_Vertex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FieldLayout_HeliostatType_Vertex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // required double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:energy_rec.FieldLayout.HeliostatType.Vertex)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  friend void  protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_AssignDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_ShutdownFile_src_2ffield_5flayout_2eproto();

  void InitAsDefaultInstance();
  static FieldLayout_HeliostatType_Vertex* default_instance_;
};
// -------------------------------------------------------------------

class FieldLayout_HeliostatType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:energy_rec.FieldLayout.HeliostatType) */ {
 public:
  FieldLayout_HeliostatType();
  virtual ~FieldLayout_HeliostatType();

  FieldLayout_HeliostatType(const FieldLayout_HeliostatType& from);

  inline FieldLayout_HeliostatType& operator=(const FieldLayout_HeliostatType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldLayout_HeliostatType& default_instance();

  void Swap(FieldLayout_HeliostatType* other);

  // implements Message ----------------------------------------------

  inline FieldLayout_HeliostatType* New() const { return New(NULL); }

  FieldLayout_HeliostatType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldLayout_HeliostatType& from);
  void MergeFrom(const FieldLayout_HeliostatType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FieldLayout_HeliostatType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FieldLayout_HeliostatType_Vertex Vertex;

  typedef FieldLayout_HeliostatType_Actuation Actuation;
  static const Actuation DIRECT =
    FieldLayout_HeliostatType_Actuation_DIRECT;
  static const Actuation AZI_ELE =
    FieldLayout_HeliostatType_Actuation_AZI_ELE;
  static const Actuation PITCH_ROLL =
    FieldLayout_HeliostatType_Actuation_PITCH_ROLL;
  static inline bool Actuation_IsValid(int value) {
    return FieldLayout_HeliostatType_Actuation_IsValid(value);
  }
  static const Actuation Actuation_MIN =
    FieldLayout_HeliostatType_Actuation_Actuation_MIN;
  static const Actuation Actuation_MAX =
    FieldLayout_HeliostatType_Actuation_Actuation_MAX;
  static const int Actuation_ARRAYSIZE =
    FieldLayout_HeliostatType_Actuation_Actuation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Actuation_descriptor() {
    return FieldLayout_HeliostatType_Actuation_descriptor();
  }
  static inline const ::std::string& Actuation_Name(Actuation value) {
    return FieldLayout_HeliostatType_Actuation_Name(value);
  }
  static inline bool Actuation_Parse(const ::std::string& name,
      Actuation* value) {
    return FieldLayout_HeliostatType_Actuation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double reflectivity = 1 [default = 1];
  bool has_reflectivity() const;
  void clear_reflectivity();
  static const int kReflectivityFieldNumber = 1;
  double reflectivity() const;
  void set_reflectivity(double value);

  // optional double focal_length = 2 [default = 0];
  bool has_focal_length() const;
  void clear_focal_length();
  static const int kFocalLengthFieldNumber = 2;
  double focal_length() const;
  void set_focal_length(double value);

  // optional .energy_rec.FieldLayout.HeliostatType.Actuation actuation = 3 [default = DIRECT];
  bool has_actuation() const;
  void clear_actuation();
  static const int kActuationFieldNumber = 3;
  ::energy_rec::FieldLayout_HeliostatType_Actuation actuation() const;
  void set_actuation(::energy_rec::FieldLayout_HeliostatType_Actuation value);

  // optional double width = 4 [default = 3];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  double width() const;
  void set_width(double value);

  // optional double height = 5 [default = 2];
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  double height() const;
  void set_height(double value);

  // repeated .energy_rec.FieldLayout.HeliostatType.Vertex vertex = 6;
  int vertex_size() const;
  void clear_vertex();
  static const int kVertexFieldNumber = 6;
  const ::energy_rec::FieldLayout_HeliostatType_Vertex& vertex(int index) const;
  ::energy_rec::FieldLayout_HeliostatType_Vertex* mutable_vertex(int index);
  ::energy_rec::FieldLayout_HeliostatType_Vertex* add_vertex();
  ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_HeliostatType_Vertex >*
      mutable_vertex();
  const ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_HeliostatType_Vertex >&
      vertex() const;

  // @@protoc_insertion_point(class_scope:energy_rec.FieldLayout.HeliostatType)
 private:
  inline void set_has_reflectivity();
  inline void clear_has_reflectivity();
  inline void set_has_focal_length();
  inline void clear_has_focal_length();
  inline void set_has_actuation();
  inline void clear_has_actuation();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double reflectivity_;
  double focal_length_;
  double width_;
  double height_;
  ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_HeliostatType_Vertex > vertex_;
  int actuation_;
  friend void  protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_AssignDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_ShutdownFile_src_2ffield_5flayout_2eproto();

  void InitAsDefaultInstance();
  static FieldLayout_HeliostatType* default_instance_;
};
// -------------------------------------------------------------------

class FieldLayout_HeliostatBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:energy_rec.FieldLayout.HeliostatBlock) */ {
 public:
  FieldLayout_HeliostatBlock();
  virtual ~FieldLayout_HeliostatBlock();

  FieldLayout_HeliostatBlock(const FieldLayout_HeliostatBlock& from);

  inline FieldLayout_HeliostatBlock& operator=(const FieldLayout_HeliostatBlock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldLayout_HeliostatBlock& default_instance();

  void Swap(FieldLayout_HeliostatBlock* other);

  // implements Message ----------------------------------------------

  inline FieldLayout_HeliostatBlock* New() const { return New(NULL); }

  FieldLayout_HeliostatBlock* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldLayout_HeliostatBlock& from);
  void MergeFrom(const FieldLayout_HeliostatBlock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FieldLayout_HeliostatBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .energy_rec.FieldLayout.HeliostatType heliostat_type = 1;
  bool has_heliostat_type() const;
  void clear_heliostat_type();
  static const int kHeliostatTypeFieldNumber = 1;
  const ::energy_rec::FieldLayout_HeliostatType& heliostat_type() const;
  ::energy_rec::FieldLayout_HeliostatType* mutable_heliostat_type();
  ::energy_rec::FieldLayout_HeliostatType* release_heliostat_type();
  void set_allocated_heliostat_type(::energy_rec::FieldLayout_HeliostatType* heliostat_type);

  // required .energy_rec.FieldLayout.Vector start = 2;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 2;
  const ::energy_rec::FieldLayout_Vector& start() const;
  ::energy_rec::FieldLayout_Vector* mutable_start();
  ::energy_rec::FieldLayout_Vector* release_start();
  void set_allocated_start(::energy_rec::FieldLayout_Vector* start);

  // required .energy_rec.FieldLayout.Vector x_step = 3;
  bool has_x_step() const;
  void clear_x_step();
  static const int kXStepFieldNumber = 3;
  const ::energy_rec::FieldLayout_Vector& x_step() const;
  ::energy_rec::FieldLayout_Vector* mutable_x_step();
  ::energy_rec::FieldLayout_Vector* release_x_step();
  void set_allocated_x_step(::energy_rec::FieldLayout_Vector* x_step);

  // required int32 num_x_steps = 4;
  bool has_num_x_steps() const;
  void clear_num_x_steps();
  static const int kNumXStepsFieldNumber = 4;
  ::google::protobuf::int32 num_x_steps() const;
  void set_num_x_steps(::google::protobuf::int32 value);

  // required .energy_rec.FieldLayout.Vector y_step = 5;
  bool has_y_step() const;
  void clear_y_step();
  static const int kYStepFieldNumber = 5;
  const ::energy_rec::FieldLayout_Vector& y_step() const;
  ::energy_rec::FieldLayout_Vector* mutable_y_step();
  ::energy_rec::FieldLayout_Vector* release_y_step();
  void set_allocated_y_step(::energy_rec::FieldLayout_Vector* y_step);

  // required int32 num_y_steps = 6;
  bool has_num_y_steps() const;
  void clear_num_y_steps();
  static const int kNumYStepsFieldNumber = 6;
  ::google::protobuf::int32 num_y_steps() const;
  void set_num_y_steps(::google::protobuf::int32 value);

  // required .energy_rec.FieldLayout.Vector aim = 7;
  bool has_aim() const;
  void clear_aim();
  static const int kAimFieldNumber = 7;
  const ::energy_rec::FieldLayout_Vector& aim() const;
  ::energy_rec::FieldLayout_Vector* mutable_aim();
  ::energy_rec::FieldLayout_Vector* release_aim();
  void set_allocated_aim(::energy_rec::FieldLayout_Vector* aim);

  // optional .energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ frame_orientation = 8;
  bool has_frame_orientation() const;
  void clear_frame_orientation();
  static const int kFrameOrientationFieldNumber = 8;
  const ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ& frame_orientation() const;
  ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* mutable_frame_orientation();
  ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* release_frame_orientation();
  void set_allocated_frame_orientation(::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* frame_orientation);

  // @@protoc_insertion_point(class_scope:energy_rec.FieldLayout.HeliostatBlock)
 private:
  inline void set_has_heliostat_type();
  inline void clear_has_heliostat_type();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_x_step();
  inline void clear_has_x_step();
  inline void set_has_num_x_steps();
  inline void clear_has_num_x_steps();
  inline void set_has_y_step();
  inline void clear_has_y_step();
  inline void set_has_num_y_steps();
  inline void clear_has_num_y_steps();
  inline void set_has_aim();
  inline void clear_has_aim();
  inline void set_has_frame_orientation();
  inline void clear_has_frame_orientation();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::energy_rec::FieldLayout_HeliostatType* heliostat_type_;
  ::energy_rec::FieldLayout_Vector* start_;
  ::energy_rec::FieldLayout_Vector* x_step_;
  ::energy_rec::FieldLayout_Vector* y_step_;
  ::google::protobuf::int32 num_x_steps_;
  ::google::protobuf::int32 num_y_steps_;
  ::energy_rec::FieldLayout_Vector* aim_;
  ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* frame_orientation_;
  friend void  protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_AssignDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_ShutdownFile_src_2ffield_5flayout_2eproto();

  void InitAsDefaultInstance();
  static FieldLayout_HeliostatBlock* default_instance_;
};
// -------------------------------------------------------------------

class FieldLayout_Heliostat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:energy_rec.FieldLayout.Heliostat) */ {
 public:
  FieldLayout_Heliostat();
  virtual ~FieldLayout_Heliostat();

  FieldLayout_Heliostat(const FieldLayout_Heliostat& from);

  inline FieldLayout_Heliostat& operator=(const FieldLayout_Heliostat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldLayout_Heliostat& default_instance();

  void Swap(FieldLayout_Heliostat* other);

  // implements Message ----------------------------------------------

  inline FieldLayout_Heliostat* New() const { return New(NULL); }

  FieldLayout_Heliostat* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldLayout_Heliostat& from);
  void MergeFrom(const FieldLayout_Heliostat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FieldLayout_Heliostat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .energy_rec.FieldLayout.HeliostatType heliostat_type = 1;
  bool has_heliostat_type() const;
  void clear_heliostat_type();
  static const int kHeliostatTypeFieldNumber = 1;
  const ::energy_rec::FieldLayout_HeliostatType& heliostat_type() const;
  ::energy_rec::FieldLayout_HeliostatType* mutable_heliostat_type();
  ::energy_rec::FieldLayout_HeliostatType* release_heliostat_type();
  void set_allocated_heliostat_type(::energy_rec::FieldLayout_HeliostatType* heliostat_type);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .energy_rec.FieldLayout.Vector location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  const ::energy_rec::FieldLayout_Vector& location() const;
  ::energy_rec::FieldLayout_Vector* mutable_location();
  ::energy_rec::FieldLayout_Vector* release_location();
  void set_allocated_location(::energy_rec::FieldLayout_Vector* location);

  // required .energy_rec.FieldLayout.Vector aim = 4;
  bool has_aim() const;
  void clear_aim();
  static const int kAimFieldNumber = 4;
  const ::energy_rec::FieldLayout_Vector& aim() const;
  ::energy_rec::FieldLayout_Vector* mutable_aim();
  ::energy_rec::FieldLayout_Vector* release_aim();
  void set_allocated_aim(::energy_rec::FieldLayout_Vector* aim);

  // optional .energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ frame_orientation = 5;
  bool has_frame_orientation() const;
  void clear_frame_orientation();
  static const int kFrameOrientationFieldNumber = 5;
  const ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ& frame_orientation() const;
  ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* mutable_frame_orientation();
  ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* release_frame_orientation();
  void set_allocated_frame_orientation(::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* frame_orientation);

  // @@protoc_insertion_point(class_scope:energy_rec.FieldLayout.Heliostat)
 private:
  inline void set_has_heliostat_type();
  inline void clear_has_heliostat_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_aim();
  inline void clear_has_aim();
  inline void set_has_frame_orientation();
  inline void clear_has_frame_orientation();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::energy_rec::FieldLayout_HeliostatType* heliostat_type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::energy_rec::FieldLayout_Vector* location_;
  ::energy_rec::FieldLayout_Vector* aim_;
  ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* frame_orientation_;
  friend void  protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_AssignDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_ShutdownFile_src_2ffield_5flayout_2eproto();

  void InitAsDefaultInstance();
  static FieldLayout_Heliostat* default_instance_;
};
// -------------------------------------------------------------------

class FieldLayout_Aperture : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:energy_rec.FieldLayout.Aperture) */ {
 public:
  FieldLayout_Aperture();
  virtual ~FieldLayout_Aperture();

  FieldLayout_Aperture(const FieldLayout_Aperture& from);

  inline FieldLayout_Aperture& operator=(const FieldLayout_Aperture& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldLayout_Aperture& default_instance();

  void Swap(FieldLayout_Aperture* other);

  // implements Message ----------------------------------------------

  inline FieldLayout_Aperture* New() const { return New(NULL); }

  FieldLayout_Aperture* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldLayout_Aperture& from);
  void MergeFrom(const FieldLayout_Aperture& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FieldLayout_Aperture* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .energy_rec.FieldLayout.Vector location = 1;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 1;
  const ::energy_rec::FieldLayout_Vector& location() const;
  ::energy_rec::FieldLayout_Vector* mutable_location();
  ::energy_rec::FieldLayout_Vector* release_location();
  void set_allocated_location(::energy_rec::FieldLayout_Vector* location);

  // required .energy_rec.FieldLayout.Vector normal = 2;
  bool has_normal() const;
  void clear_normal();
  static const int kNormalFieldNumber = 2;
  const ::energy_rec::FieldLayout_Vector& normal() const;
  ::energy_rec::FieldLayout_Vector* mutable_normal();
  ::energy_rec::FieldLayout_Vector* release_normal();
  void set_allocated_normal(::energy_rec::FieldLayout_Vector* normal);

  // required double radius = 3;
  bool has_radius() const;
  void clear_radius();
  static const int kRadiusFieldNumber = 3;
  double radius() const;
  void set_radius(double value);

  // @@protoc_insertion_point(class_scope:energy_rec.FieldLayout.Aperture)
 private:
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_normal();
  inline void clear_has_normal();
  inline void set_has_radius();
  inline void clear_has_radius();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::energy_rec::FieldLayout_Vector* location_;
  ::energy_rec::FieldLayout_Vector* normal_;
  double radius_;
  friend void  protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_AssignDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_ShutdownFile_src_2ffield_5flayout_2eproto();

  void InitAsDefaultInstance();
  static FieldLayout_Aperture* default_instance_;
};
// -------------------------------------------------------------------

class FieldLayout_Receiver : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:energy_rec.FieldLayout.Receiver) */ {
 public:
  FieldLayout_Receiver();
  virtual ~FieldLayout_Receiver();

  FieldLayout_Receiver(const FieldLayout_Receiver& from);

  inline FieldLayout_Receiver& operator=(const FieldLayout_Receiver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldLayout_Receiver& default_instance();

  void Swap(FieldLayout_Receiver* other);

  // implements Message ----------------------------------------------

  inline FieldLayout_Receiver* New() const { return New(NULL); }

  FieldLayout_Receiver* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldLayout_Receiver& from);
  void MergeFrom(const FieldLayout_Receiver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FieldLayout_Receiver* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required .energy_rec.FieldLayout.Vector location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  const ::energy_rec::FieldLayout_Vector& location() const;
  ::energy_rec::FieldLayout_Vector* mutable_location();
  ::energy_rec::FieldLayout_Vector* release_location();
  void set_allocated_location(::energy_rec::FieldLayout_Vector* location);

  // required .energy_rec.FieldLayout.Vector direction = 3;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 3;
  const ::energy_rec::FieldLayout_Vector& direction() const;
  ::energy_rec::FieldLayout_Vector* mutable_direction();
  ::energy_rec::FieldLayout_Vector* release_direction();
  void set_allocated_direction(::energy_rec::FieldLayout_Vector* direction);

  // required int32 resolution = 4;
  bool has_resolution() const;
  void clear_resolution();
  static const int kResolutionFieldNumber = 4;
  ::google::protobuf::int32 resolution() const;
  void set_resolution(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:energy_rec.FieldLayout.Receiver)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_resolution();
  inline void clear_has_resolution();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::energy_rec::FieldLayout_Vector* location_;
  ::energy_rec::FieldLayout_Vector* direction_;
  ::google::protobuf::int32 resolution_;
  friend void  protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_AssignDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_ShutdownFile_src_2ffield_5flayout_2eproto();

  void InitAsDefaultInstance();
  static FieldLayout_Receiver* default_instance_;
};
// -------------------------------------------------------------------

class FieldLayout : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:energy_rec.FieldLayout) */ {
 public:
  FieldLayout();
  virtual ~FieldLayout();

  FieldLayout(const FieldLayout& from);

  inline FieldLayout& operator=(const FieldLayout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldLayout& default_instance();

  void Swap(FieldLayout* other);

  // implements Message ----------------------------------------------

  inline FieldLayout* New() const { return New(NULL); }

  FieldLayout* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldLayout& from);
  void MergeFrom(const FieldLayout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FieldLayout* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FieldLayout_Vector Vector;
  typedef FieldLayout_EulerAnglesIntrinsicZXZ EulerAnglesIntrinsicZXZ;
  typedef FieldLayout_ManualSunConfig ManualSunConfig;
  typedef FieldLayout_Sun Sun;
  typedef FieldLayout_HeliostatType HeliostatType;
  typedef FieldLayout_HeliostatBlock HeliostatBlock;
  typedef FieldLayout_Heliostat Heliostat;
  typedef FieldLayout_Aperture Aperture;
  typedef FieldLayout_Receiver Receiver;

  // accessors -------------------------------------------------------

  // required .energy_rec.FieldLayout.Sun sun = 1;
  bool has_sun() const;
  void clear_sun();
  static const int kSunFieldNumber = 1;
  const ::energy_rec::FieldLayout_Sun& sun() const;
  ::energy_rec::FieldLayout_Sun* mutable_sun();
  ::energy_rec::FieldLayout_Sun* release_sun();
  void set_allocated_sun(::energy_rec::FieldLayout_Sun* sun);

  // repeated .energy_rec.FieldLayout.HeliostatBlock heliostat_block = 2;
  int heliostat_block_size() const;
  void clear_heliostat_block();
  static const int kHeliostatBlockFieldNumber = 2;
  const ::energy_rec::FieldLayout_HeliostatBlock& heliostat_block(int index) const;
  ::energy_rec::FieldLayout_HeliostatBlock* mutable_heliostat_block(int index);
  ::energy_rec::FieldLayout_HeliostatBlock* add_heliostat_block();
  ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_HeliostatBlock >*
      mutable_heliostat_block();
  const ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_HeliostatBlock >&
      heliostat_block() const;

  // repeated .energy_rec.FieldLayout.Heliostat heliostat = 3;
  int heliostat_size() const;
  void clear_heliostat();
  static const int kHeliostatFieldNumber = 3;
  const ::energy_rec::FieldLayout_Heliostat& heliostat(int index) const;
  ::energy_rec::FieldLayout_Heliostat* mutable_heliostat(int index);
  ::energy_rec::FieldLayout_Heliostat* add_heliostat();
  ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_Heliostat >*
      mutable_heliostat();
  const ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_Heliostat >&
      heliostat() const;

  // optional .energy_rec.FieldLayout.Aperture aperture = 4;
  bool has_aperture() const;
  void clear_aperture();
  static const int kApertureFieldNumber = 4;
  const ::energy_rec::FieldLayout_Aperture& aperture() const;
  ::energy_rec::FieldLayout_Aperture* mutable_aperture();
  ::energy_rec::FieldLayout_Aperture* release_aperture();
  void set_allocated_aperture(::energy_rec::FieldLayout_Aperture* aperture);

  // required .energy_rec.FieldLayout.Receiver receiver = 5;
  bool has_receiver() const;
  void clear_receiver();
  static const int kReceiverFieldNumber = 5;
  const ::energy_rec::FieldLayout_Receiver& receiver() const;
  ::energy_rec::FieldLayout_Receiver* mutable_receiver();
  ::energy_rec::FieldLayout_Receiver* release_receiver();
  void set_allocated_receiver(::energy_rec::FieldLayout_Receiver* receiver);

  // @@protoc_insertion_point(class_scope:energy_rec.FieldLayout)
 private:
  inline void set_has_sun();
  inline void clear_has_sun();
  inline void set_has_aperture();
  inline void clear_has_aperture();
  inline void set_has_receiver();
  inline void clear_has_receiver();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::energy_rec::FieldLayout_Sun* sun_;
  ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_HeliostatBlock > heliostat_block_;
  ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_Heliostat > heliostat_;
  ::energy_rec::FieldLayout_Aperture* aperture_;
  ::energy_rec::FieldLayout_Receiver* receiver_;
  friend void  protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_AssignDesc_src_2ffield_5flayout_2eproto();
  friend void protobuf_ShutdownFile_src_2ffield_5flayout_2eproto();

  void InitAsDefaultInstance();
  static FieldLayout* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FieldLayout_Vector

// required .energy_rec.FieldLayout.Vector.CoordinateSystem coordinate_system = 1;
inline bool FieldLayout_Vector::has_coordinate_system() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldLayout_Vector::set_has_coordinate_system() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldLayout_Vector::clear_has_coordinate_system() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldLayout_Vector::clear_coordinate_system() {
  coordinate_system_ = 0;
  clear_has_coordinate_system();
}
inline ::energy_rec::FieldLayout_Vector_CoordinateSystem FieldLayout_Vector::coordinate_system() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Vector.coordinate_system)
  return static_cast< ::energy_rec::FieldLayout_Vector_CoordinateSystem >(coordinate_system_);
}
inline void FieldLayout_Vector::set_coordinate_system(::energy_rec::FieldLayout_Vector_CoordinateSystem value) {
  assert(::energy_rec::FieldLayout_Vector_CoordinateSystem_IsValid(value));
  set_has_coordinate_system();
  coordinate_system_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.Vector.coordinate_system)
}

// repeated double coordinate = 2;
inline int FieldLayout_Vector::coordinate_size() const {
  return coordinate_.size();
}
inline void FieldLayout_Vector::clear_coordinate() {
  coordinate_.Clear();
}
inline double FieldLayout_Vector::coordinate(int index) const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Vector.coordinate)
  return coordinate_.Get(index);
}
inline void FieldLayout_Vector::set_coordinate(int index, double value) {
  coordinate_.Set(index, value);
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.Vector.coordinate)
}
inline void FieldLayout_Vector::add_coordinate(double value) {
  coordinate_.Add(value);
  // @@protoc_insertion_point(field_add:energy_rec.FieldLayout.Vector.coordinate)
}
inline const ::google::protobuf::RepeatedField< double >&
FieldLayout_Vector::coordinate() const {
  // @@protoc_insertion_point(field_list:energy_rec.FieldLayout.Vector.coordinate)
  return coordinate_;
}
inline ::google::protobuf::RepeatedField< double >*
FieldLayout_Vector::mutable_coordinate() {
  // @@protoc_insertion_point(field_mutable_list:energy_rec.FieldLayout.Vector.coordinate)
  return &coordinate_;
}

// -------------------------------------------------------------------

// FieldLayout_EulerAnglesIntrinsicZXZ

// required double alpha = 1 [default = 0];
inline bool FieldLayout_EulerAnglesIntrinsicZXZ::has_alpha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldLayout_EulerAnglesIntrinsicZXZ::set_has_alpha() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldLayout_EulerAnglesIntrinsicZXZ::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldLayout_EulerAnglesIntrinsicZXZ::clear_alpha() {
  alpha_ = 0;
  clear_has_alpha();
}
inline double FieldLayout_EulerAnglesIntrinsicZXZ::alpha() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ.alpha)
  return alpha_;
}
inline void FieldLayout_EulerAnglesIntrinsicZXZ::set_alpha(double value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ.alpha)
}

// required double beta = 2 [default = 0];
inline bool FieldLayout_EulerAnglesIntrinsicZXZ::has_beta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldLayout_EulerAnglesIntrinsicZXZ::set_has_beta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldLayout_EulerAnglesIntrinsicZXZ::clear_has_beta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldLayout_EulerAnglesIntrinsicZXZ::clear_beta() {
  beta_ = 0;
  clear_has_beta();
}
inline double FieldLayout_EulerAnglesIntrinsicZXZ::beta() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ.beta)
  return beta_;
}
inline void FieldLayout_EulerAnglesIntrinsicZXZ::set_beta(double value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ.beta)
}

// required double gamma = 3 [default = 0];
inline bool FieldLayout_EulerAnglesIntrinsicZXZ::has_gamma() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FieldLayout_EulerAnglesIntrinsicZXZ::set_has_gamma() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FieldLayout_EulerAnglesIntrinsicZXZ::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FieldLayout_EulerAnglesIntrinsicZXZ::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
inline double FieldLayout_EulerAnglesIntrinsicZXZ::gamma() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ.gamma)
  return gamma_;
}
inline void FieldLayout_EulerAnglesIntrinsicZXZ::set_gamma(double value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ.gamma)
}

// -------------------------------------------------------------------

// FieldLayout_ManualSunConfig

// required .energy_rec.FieldLayout.Vector sun_vector = 1;
inline bool FieldLayout_ManualSunConfig::has_sun_vector() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldLayout_ManualSunConfig::set_has_sun_vector() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldLayout_ManualSunConfig::clear_has_sun_vector() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldLayout_ManualSunConfig::clear_sun_vector() {
  if (sun_vector_ != NULL) sun_vector_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_sun_vector();
}
inline const ::energy_rec::FieldLayout_Vector& FieldLayout_ManualSunConfig::sun_vector() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.ManualSunConfig.sun_vector)
  return sun_vector_ != NULL ? *sun_vector_ : *default_instance_->sun_vector_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_ManualSunConfig::mutable_sun_vector() {
  set_has_sun_vector();
  if (sun_vector_ == NULL) {
    sun_vector_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.ManualSunConfig.sun_vector)
  return sun_vector_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_ManualSunConfig::release_sun_vector() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.ManualSunConfig.sun_vector)
  clear_has_sun_vector();
  ::energy_rec::FieldLayout_Vector* temp = sun_vector_;
  sun_vector_ = NULL;
  return temp;
}
inline void FieldLayout_ManualSunConfig::set_allocated_sun_vector(::energy_rec::FieldLayout_Vector* sun_vector) {
  delete sun_vector_;
  sun_vector_ = sun_vector;
  if (sun_vector) {
    set_has_sun_vector();
  } else {
    clear_has_sun_vector();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.ManualSunConfig.sun_vector)
}

// required double dni = 2;
inline bool FieldLayout_ManualSunConfig::has_dni() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldLayout_ManualSunConfig::set_has_dni() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldLayout_ManualSunConfig::clear_has_dni() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldLayout_ManualSunConfig::clear_dni() {
  dni_ = 0;
  clear_has_dni();
}
inline double FieldLayout_ManualSunConfig::dni() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.ManualSunConfig.dni)
  return dni_;
}
inline void FieldLayout_ManualSunConfig::set_dni(double value) {
  set_has_dni();
  dni_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.ManualSunConfig.dni)
}

// -------------------------------------------------------------------

// FieldLayout_Sun

// required bool automatic = 1;
inline bool FieldLayout_Sun::has_automatic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldLayout_Sun::set_has_automatic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldLayout_Sun::clear_has_automatic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldLayout_Sun::clear_automatic() {
  automatic_ = false;
  clear_has_automatic();
}
inline bool FieldLayout_Sun::automatic() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Sun.automatic)
  return automatic_;
}
inline void FieldLayout_Sun::set_automatic(bool value) {
  set_has_automatic();
  automatic_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.Sun.automatic)
}

// optional .energy_rec.FieldLayout.Vector field_location = 2;
inline bool FieldLayout_Sun::has_field_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldLayout_Sun::set_has_field_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldLayout_Sun::clear_has_field_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldLayout_Sun::clear_field_location() {
  if (field_location_ != NULL) field_location_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_field_location();
}
inline const ::energy_rec::FieldLayout_Vector& FieldLayout_Sun::field_location() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Sun.field_location)
  return field_location_ != NULL ? *field_location_ : *default_instance_->field_location_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_Sun::mutable_field_location() {
  set_has_field_location();
  if (field_location_ == NULL) {
    field_location_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Sun.field_location)
  return field_location_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_Sun::release_field_location() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Sun.field_location)
  clear_has_field_location();
  ::energy_rec::FieldLayout_Vector* temp = field_location_;
  field_location_ = NULL;
  return temp;
}
inline void FieldLayout_Sun::set_allocated_field_location(::energy_rec::FieldLayout_Vector* field_location) {
  delete field_location_;
  field_location_ = field_location;
  if (field_location) {
    set_has_field_location();
  } else {
    clear_has_field_location();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Sun.field_location)
}

// repeated .energy_rec.FieldLayout.ManualSunConfig sun_config = 3;
inline int FieldLayout_Sun::sun_config_size() const {
  return sun_config_.size();
}
inline void FieldLayout_Sun::clear_sun_config() {
  sun_config_.Clear();
}
inline const ::energy_rec::FieldLayout_ManualSunConfig& FieldLayout_Sun::sun_config(int index) const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Sun.sun_config)
  return sun_config_.Get(index);
}
inline ::energy_rec::FieldLayout_ManualSunConfig* FieldLayout_Sun::mutable_sun_config(int index) {
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Sun.sun_config)
  return sun_config_.Mutable(index);
}
inline ::energy_rec::FieldLayout_ManualSunConfig* FieldLayout_Sun::add_sun_config() {
  // @@protoc_insertion_point(field_add:energy_rec.FieldLayout.Sun.sun_config)
  return sun_config_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_ManualSunConfig >*
FieldLayout_Sun::mutable_sun_config() {
  // @@protoc_insertion_point(field_mutable_list:energy_rec.FieldLayout.Sun.sun_config)
  return &sun_config_;
}
inline const ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_ManualSunConfig >&
FieldLayout_Sun::sun_config() const {
  // @@protoc_insertion_point(field_list:energy_rec.FieldLayout.Sun.sun_config)
  return sun_config_;
}

// -------------------------------------------------------------------

// FieldLayout_HeliostatType_Vertex

// required double x = 1;
inline bool FieldLayout_HeliostatType_Vertex::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldLayout_HeliostatType_Vertex::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldLayout_HeliostatType_Vertex::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldLayout_HeliostatType_Vertex::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double FieldLayout_HeliostatType_Vertex::x() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatType.Vertex.x)
  return x_;
}
inline void FieldLayout_HeliostatType_Vertex::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.HeliostatType.Vertex.x)
}

// required double y = 2;
inline bool FieldLayout_HeliostatType_Vertex::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldLayout_HeliostatType_Vertex::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldLayout_HeliostatType_Vertex::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldLayout_HeliostatType_Vertex::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double FieldLayout_HeliostatType_Vertex::y() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatType.Vertex.y)
  return y_;
}
inline void FieldLayout_HeliostatType_Vertex::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.HeliostatType.Vertex.y)
}

// -------------------------------------------------------------------

// FieldLayout_HeliostatType

// optional double reflectivity = 1 [default = 1];
inline bool FieldLayout_HeliostatType::has_reflectivity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldLayout_HeliostatType::set_has_reflectivity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldLayout_HeliostatType::clear_has_reflectivity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldLayout_HeliostatType::clear_reflectivity() {
  reflectivity_ = 1;
  clear_has_reflectivity();
}
inline double FieldLayout_HeliostatType::reflectivity() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatType.reflectivity)
  return reflectivity_;
}
inline void FieldLayout_HeliostatType::set_reflectivity(double value) {
  set_has_reflectivity();
  reflectivity_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.HeliostatType.reflectivity)
}

// optional double focal_length = 2 [default = 0];
inline bool FieldLayout_HeliostatType::has_focal_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldLayout_HeliostatType::set_has_focal_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldLayout_HeliostatType::clear_has_focal_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldLayout_HeliostatType::clear_focal_length() {
  focal_length_ = 0;
  clear_has_focal_length();
}
inline double FieldLayout_HeliostatType::focal_length() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatType.focal_length)
  return focal_length_;
}
inline void FieldLayout_HeliostatType::set_focal_length(double value) {
  set_has_focal_length();
  focal_length_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.HeliostatType.focal_length)
}

// optional .energy_rec.FieldLayout.HeliostatType.Actuation actuation = 3 [default = DIRECT];
inline bool FieldLayout_HeliostatType::has_actuation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FieldLayout_HeliostatType::set_has_actuation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FieldLayout_HeliostatType::clear_has_actuation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FieldLayout_HeliostatType::clear_actuation() {
  actuation_ = 0;
  clear_has_actuation();
}
inline ::energy_rec::FieldLayout_HeliostatType_Actuation FieldLayout_HeliostatType::actuation() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatType.actuation)
  return static_cast< ::energy_rec::FieldLayout_HeliostatType_Actuation >(actuation_);
}
inline void FieldLayout_HeliostatType::set_actuation(::energy_rec::FieldLayout_HeliostatType_Actuation value) {
  assert(::energy_rec::FieldLayout_HeliostatType_Actuation_IsValid(value));
  set_has_actuation();
  actuation_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.HeliostatType.actuation)
}

// optional double width = 4 [default = 3];
inline bool FieldLayout_HeliostatType::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FieldLayout_HeliostatType::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FieldLayout_HeliostatType::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FieldLayout_HeliostatType::clear_width() {
  width_ = 3;
  clear_has_width();
}
inline double FieldLayout_HeliostatType::width() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatType.width)
  return width_;
}
inline void FieldLayout_HeliostatType::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.HeliostatType.width)
}

// optional double height = 5 [default = 2];
inline bool FieldLayout_HeliostatType::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FieldLayout_HeliostatType::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FieldLayout_HeliostatType::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FieldLayout_HeliostatType::clear_height() {
  height_ = 2;
  clear_has_height();
}
inline double FieldLayout_HeliostatType::height() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatType.height)
  return height_;
}
inline void FieldLayout_HeliostatType::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.HeliostatType.height)
}

// repeated .energy_rec.FieldLayout.HeliostatType.Vertex vertex = 6;
inline int FieldLayout_HeliostatType::vertex_size() const {
  return vertex_.size();
}
inline void FieldLayout_HeliostatType::clear_vertex() {
  vertex_.Clear();
}
inline const ::energy_rec::FieldLayout_HeliostatType_Vertex& FieldLayout_HeliostatType::vertex(int index) const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatType.vertex)
  return vertex_.Get(index);
}
inline ::energy_rec::FieldLayout_HeliostatType_Vertex* FieldLayout_HeliostatType::mutable_vertex(int index) {
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.HeliostatType.vertex)
  return vertex_.Mutable(index);
}
inline ::energy_rec::FieldLayout_HeliostatType_Vertex* FieldLayout_HeliostatType::add_vertex() {
  // @@protoc_insertion_point(field_add:energy_rec.FieldLayout.HeliostatType.vertex)
  return vertex_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_HeliostatType_Vertex >*
FieldLayout_HeliostatType::mutable_vertex() {
  // @@protoc_insertion_point(field_mutable_list:energy_rec.FieldLayout.HeliostatType.vertex)
  return &vertex_;
}
inline const ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_HeliostatType_Vertex >&
FieldLayout_HeliostatType::vertex() const {
  // @@protoc_insertion_point(field_list:energy_rec.FieldLayout.HeliostatType.vertex)
  return vertex_;
}

// -------------------------------------------------------------------

// FieldLayout_HeliostatBlock

// required .energy_rec.FieldLayout.HeliostatType heliostat_type = 1;
inline bool FieldLayout_HeliostatBlock::has_heliostat_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldLayout_HeliostatBlock::set_has_heliostat_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldLayout_HeliostatBlock::clear_has_heliostat_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldLayout_HeliostatBlock::clear_heliostat_type() {
  if (heliostat_type_ != NULL) heliostat_type_->::energy_rec::FieldLayout_HeliostatType::Clear();
  clear_has_heliostat_type();
}
inline const ::energy_rec::FieldLayout_HeliostatType& FieldLayout_HeliostatBlock::heliostat_type() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatBlock.heliostat_type)
  return heliostat_type_ != NULL ? *heliostat_type_ : *default_instance_->heliostat_type_;
}
inline ::energy_rec::FieldLayout_HeliostatType* FieldLayout_HeliostatBlock::mutable_heliostat_type() {
  set_has_heliostat_type();
  if (heliostat_type_ == NULL) {
    heliostat_type_ = new ::energy_rec::FieldLayout_HeliostatType;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.HeliostatBlock.heliostat_type)
  return heliostat_type_;
}
inline ::energy_rec::FieldLayout_HeliostatType* FieldLayout_HeliostatBlock::release_heliostat_type() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.HeliostatBlock.heliostat_type)
  clear_has_heliostat_type();
  ::energy_rec::FieldLayout_HeliostatType* temp = heliostat_type_;
  heliostat_type_ = NULL;
  return temp;
}
inline void FieldLayout_HeliostatBlock::set_allocated_heliostat_type(::energy_rec::FieldLayout_HeliostatType* heliostat_type) {
  delete heliostat_type_;
  heliostat_type_ = heliostat_type;
  if (heliostat_type) {
    set_has_heliostat_type();
  } else {
    clear_has_heliostat_type();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.HeliostatBlock.heliostat_type)
}

// required .energy_rec.FieldLayout.Vector start = 2;
inline bool FieldLayout_HeliostatBlock::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldLayout_HeliostatBlock::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldLayout_HeliostatBlock::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldLayout_HeliostatBlock::clear_start() {
  if (start_ != NULL) start_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_start();
}
inline const ::energy_rec::FieldLayout_Vector& FieldLayout_HeliostatBlock::start() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatBlock.start)
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_HeliostatBlock::mutable_start() {
  set_has_start();
  if (start_ == NULL) {
    start_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.HeliostatBlock.start)
  return start_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_HeliostatBlock::release_start() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.HeliostatBlock.start)
  clear_has_start();
  ::energy_rec::FieldLayout_Vector* temp = start_;
  start_ = NULL;
  return temp;
}
inline void FieldLayout_HeliostatBlock::set_allocated_start(::energy_rec::FieldLayout_Vector* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.HeliostatBlock.start)
}

// required .energy_rec.FieldLayout.Vector x_step = 3;
inline bool FieldLayout_HeliostatBlock::has_x_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FieldLayout_HeliostatBlock::set_has_x_step() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FieldLayout_HeliostatBlock::clear_has_x_step() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FieldLayout_HeliostatBlock::clear_x_step() {
  if (x_step_ != NULL) x_step_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_x_step();
}
inline const ::energy_rec::FieldLayout_Vector& FieldLayout_HeliostatBlock::x_step() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatBlock.x_step)
  return x_step_ != NULL ? *x_step_ : *default_instance_->x_step_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_HeliostatBlock::mutable_x_step() {
  set_has_x_step();
  if (x_step_ == NULL) {
    x_step_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.HeliostatBlock.x_step)
  return x_step_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_HeliostatBlock::release_x_step() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.HeliostatBlock.x_step)
  clear_has_x_step();
  ::energy_rec::FieldLayout_Vector* temp = x_step_;
  x_step_ = NULL;
  return temp;
}
inline void FieldLayout_HeliostatBlock::set_allocated_x_step(::energy_rec::FieldLayout_Vector* x_step) {
  delete x_step_;
  x_step_ = x_step;
  if (x_step) {
    set_has_x_step();
  } else {
    clear_has_x_step();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.HeliostatBlock.x_step)
}

// required int32 num_x_steps = 4;
inline bool FieldLayout_HeliostatBlock::has_num_x_steps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FieldLayout_HeliostatBlock::set_has_num_x_steps() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FieldLayout_HeliostatBlock::clear_has_num_x_steps() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FieldLayout_HeliostatBlock::clear_num_x_steps() {
  num_x_steps_ = 0;
  clear_has_num_x_steps();
}
inline ::google::protobuf::int32 FieldLayout_HeliostatBlock::num_x_steps() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatBlock.num_x_steps)
  return num_x_steps_;
}
inline void FieldLayout_HeliostatBlock::set_num_x_steps(::google::protobuf::int32 value) {
  set_has_num_x_steps();
  num_x_steps_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.HeliostatBlock.num_x_steps)
}

// required .energy_rec.FieldLayout.Vector y_step = 5;
inline bool FieldLayout_HeliostatBlock::has_y_step() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FieldLayout_HeliostatBlock::set_has_y_step() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FieldLayout_HeliostatBlock::clear_has_y_step() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FieldLayout_HeliostatBlock::clear_y_step() {
  if (y_step_ != NULL) y_step_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_y_step();
}
inline const ::energy_rec::FieldLayout_Vector& FieldLayout_HeliostatBlock::y_step() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatBlock.y_step)
  return y_step_ != NULL ? *y_step_ : *default_instance_->y_step_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_HeliostatBlock::mutable_y_step() {
  set_has_y_step();
  if (y_step_ == NULL) {
    y_step_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.HeliostatBlock.y_step)
  return y_step_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_HeliostatBlock::release_y_step() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.HeliostatBlock.y_step)
  clear_has_y_step();
  ::energy_rec::FieldLayout_Vector* temp = y_step_;
  y_step_ = NULL;
  return temp;
}
inline void FieldLayout_HeliostatBlock::set_allocated_y_step(::energy_rec::FieldLayout_Vector* y_step) {
  delete y_step_;
  y_step_ = y_step;
  if (y_step) {
    set_has_y_step();
  } else {
    clear_has_y_step();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.HeliostatBlock.y_step)
}

// required int32 num_y_steps = 6;
inline bool FieldLayout_HeliostatBlock::has_num_y_steps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FieldLayout_HeliostatBlock::set_has_num_y_steps() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FieldLayout_HeliostatBlock::clear_has_num_y_steps() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FieldLayout_HeliostatBlock::clear_num_y_steps() {
  num_y_steps_ = 0;
  clear_has_num_y_steps();
}
inline ::google::protobuf::int32 FieldLayout_HeliostatBlock::num_y_steps() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatBlock.num_y_steps)
  return num_y_steps_;
}
inline void FieldLayout_HeliostatBlock::set_num_y_steps(::google::protobuf::int32 value) {
  set_has_num_y_steps();
  num_y_steps_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.HeliostatBlock.num_y_steps)
}

// required .energy_rec.FieldLayout.Vector aim = 7;
inline bool FieldLayout_HeliostatBlock::has_aim() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FieldLayout_HeliostatBlock::set_has_aim() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FieldLayout_HeliostatBlock::clear_has_aim() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FieldLayout_HeliostatBlock::clear_aim() {
  if (aim_ != NULL) aim_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_aim();
}
inline const ::energy_rec::FieldLayout_Vector& FieldLayout_HeliostatBlock::aim() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatBlock.aim)
  return aim_ != NULL ? *aim_ : *default_instance_->aim_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_HeliostatBlock::mutable_aim() {
  set_has_aim();
  if (aim_ == NULL) {
    aim_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.HeliostatBlock.aim)
  return aim_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_HeliostatBlock::release_aim() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.HeliostatBlock.aim)
  clear_has_aim();
  ::energy_rec::FieldLayout_Vector* temp = aim_;
  aim_ = NULL;
  return temp;
}
inline void FieldLayout_HeliostatBlock::set_allocated_aim(::energy_rec::FieldLayout_Vector* aim) {
  delete aim_;
  aim_ = aim;
  if (aim) {
    set_has_aim();
  } else {
    clear_has_aim();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.HeliostatBlock.aim)
}

// optional .energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ frame_orientation = 8;
inline bool FieldLayout_HeliostatBlock::has_frame_orientation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FieldLayout_HeliostatBlock::set_has_frame_orientation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FieldLayout_HeliostatBlock::clear_has_frame_orientation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FieldLayout_HeliostatBlock::clear_frame_orientation() {
  if (frame_orientation_ != NULL) frame_orientation_->::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ::Clear();
  clear_has_frame_orientation();
}
inline const ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ& FieldLayout_HeliostatBlock::frame_orientation() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatBlock.frame_orientation)
  return frame_orientation_ != NULL ? *frame_orientation_ : *default_instance_->frame_orientation_;
}
inline ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* FieldLayout_HeliostatBlock::mutable_frame_orientation() {
  set_has_frame_orientation();
  if (frame_orientation_ == NULL) {
    frame_orientation_ = new ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.HeliostatBlock.frame_orientation)
  return frame_orientation_;
}
inline ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* FieldLayout_HeliostatBlock::release_frame_orientation() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.HeliostatBlock.frame_orientation)
  clear_has_frame_orientation();
  ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* temp = frame_orientation_;
  frame_orientation_ = NULL;
  return temp;
}
inline void FieldLayout_HeliostatBlock::set_allocated_frame_orientation(::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* frame_orientation) {
  delete frame_orientation_;
  frame_orientation_ = frame_orientation;
  if (frame_orientation) {
    set_has_frame_orientation();
  } else {
    clear_has_frame_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.HeliostatBlock.frame_orientation)
}

// -------------------------------------------------------------------

// FieldLayout_Heliostat

// required .energy_rec.FieldLayout.HeliostatType heliostat_type = 1;
inline bool FieldLayout_Heliostat::has_heliostat_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldLayout_Heliostat::set_has_heliostat_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldLayout_Heliostat::clear_has_heliostat_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldLayout_Heliostat::clear_heliostat_type() {
  if (heliostat_type_ != NULL) heliostat_type_->::energy_rec::FieldLayout_HeliostatType::Clear();
  clear_has_heliostat_type();
}
inline const ::energy_rec::FieldLayout_HeliostatType& FieldLayout_Heliostat::heliostat_type() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Heliostat.heliostat_type)
  return heliostat_type_ != NULL ? *heliostat_type_ : *default_instance_->heliostat_type_;
}
inline ::energy_rec::FieldLayout_HeliostatType* FieldLayout_Heliostat::mutable_heliostat_type() {
  set_has_heliostat_type();
  if (heliostat_type_ == NULL) {
    heliostat_type_ = new ::energy_rec::FieldLayout_HeliostatType;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Heliostat.heliostat_type)
  return heliostat_type_;
}
inline ::energy_rec::FieldLayout_HeliostatType* FieldLayout_Heliostat::release_heliostat_type() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Heliostat.heliostat_type)
  clear_has_heliostat_type();
  ::energy_rec::FieldLayout_HeliostatType* temp = heliostat_type_;
  heliostat_type_ = NULL;
  return temp;
}
inline void FieldLayout_Heliostat::set_allocated_heliostat_type(::energy_rec::FieldLayout_HeliostatType* heliostat_type) {
  delete heliostat_type_;
  heliostat_type_ = heliostat_type;
  if (heliostat_type) {
    set_has_heliostat_type();
  } else {
    clear_has_heliostat_type();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Heliostat.heliostat_type)
}

// optional string name = 2;
inline bool FieldLayout_Heliostat::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldLayout_Heliostat::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldLayout_Heliostat::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldLayout_Heliostat::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& FieldLayout_Heliostat::name() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Heliostat.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FieldLayout_Heliostat::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.Heliostat.name)
}
inline void FieldLayout_Heliostat::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:energy_rec.FieldLayout.Heliostat.name)
}
inline void FieldLayout_Heliostat::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:energy_rec.FieldLayout.Heliostat.name)
}
inline ::std::string* FieldLayout_Heliostat::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Heliostat.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FieldLayout_Heliostat::release_name() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Heliostat.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FieldLayout_Heliostat::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Heliostat.name)
}

// required .energy_rec.FieldLayout.Vector location = 3;
inline bool FieldLayout_Heliostat::has_location() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FieldLayout_Heliostat::set_has_location() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FieldLayout_Heliostat::clear_has_location() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FieldLayout_Heliostat::clear_location() {
  if (location_ != NULL) location_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_location();
}
inline const ::energy_rec::FieldLayout_Vector& FieldLayout_Heliostat::location() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Heliostat.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_Heliostat::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Heliostat.location)
  return location_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_Heliostat::release_location() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Heliostat.location)
  clear_has_location();
  ::energy_rec::FieldLayout_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
inline void FieldLayout_Heliostat::set_allocated_location(::energy_rec::FieldLayout_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Heliostat.location)
}

// required .energy_rec.FieldLayout.Vector aim = 4;
inline bool FieldLayout_Heliostat::has_aim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FieldLayout_Heliostat::set_has_aim() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FieldLayout_Heliostat::clear_has_aim() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FieldLayout_Heliostat::clear_aim() {
  if (aim_ != NULL) aim_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_aim();
}
inline const ::energy_rec::FieldLayout_Vector& FieldLayout_Heliostat::aim() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Heliostat.aim)
  return aim_ != NULL ? *aim_ : *default_instance_->aim_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_Heliostat::mutable_aim() {
  set_has_aim();
  if (aim_ == NULL) {
    aim_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Heliostat.aim)
  return aim_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_Heliostat::release_aim() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Heliostat.aim)
  clear_has_aim();
  ::energy_rec::FieldLayout_Vector* temp = aim_;
  aim_ = NULL;
  return temp;
}
inline void FieldLayout_Heliostat::set_allocated_aim(::energy_rec::FieldLayout_Vector* aim) {
  delete aim_;
  aim_ = aim;
  if (aim) {
    set_has_aim();
  } else {
    clear_has_aim();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Heliostat.aim)
}

// optional .energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ frame_orientation = 5;
inline bool FieldLayout_Heliostat::has_frame_orientation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FieldLayout_Heliostat::set_has_frame_orientation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FieldLayout_Heliostat::clear_has_frame_orientation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FieldLayout_Heliostat::clear_frame_orientation() {
  if (frame_orientation_ != NULL) frame_orientation_->::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ::Clear();
  clear_has_frame_orientation();
}
inline const ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ& FieldLayout_Heliostat::frame_orientation() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Heliostat.frame_orientation)
  return frame_orientation_ != NULL ? *frame_orientation_ : *default_instance_->frame_orientation_;
}
inline ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* FieldLayout_Heliostat::mutable_frame_orientation() {
  set_has_frame_orientation();
  if (frame_orientation_ == NULL) {
    frame_orientation_ = new ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Heliostat.frame_orientation)
  return frame_orientation_;
}
inline ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* FieldLayout_Heliostat::release_frame_orientation() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Heliostat.frame_orientation)
  clear_has_frame_orientation();
  ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* temp = frame_orientation_;
  frame_orientation_ = NULL;
  return temp;
}
inline void FieldLayout_Heliostat::set_allocated_frame_orientation(::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* frame_orientation) {
  delete frame_orientation_;
  frame_orientation_ = frame_orientation;
  if (frame_orientation) {
    set_has_frame_orientation();
  } else {
    clear_has_frame_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Heliostat.frame_orientation)
}

// -------------------------------------------------------------------

// FieldLayout_Aperture

// required .energy_rec.FieldLayout.Vector location = 1;
inline bool FieldLayout_Aperture::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldLayout_Aperture::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldLayout_Aperture::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldLayout_Aperture::clear_location() {
  if (location_ != NULL) location_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_location();
}
inline const ::energy_rec::FieldLayout_Vector& FieldLayout_Aperture::location() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Aperture.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_Aperture::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Aperture.location)
  return location_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_Aperture::release_location() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Aperture.location)
  clear_has_location();
  ::energy_rec::FieldLayout_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
inline void FieldLayout_Aperture::set_allocated_location(::energy_rec::FieldLayout_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Aperture.location)
}

// required .energy_rec.FieldLayout.Vector normal = 2;
inline bool FieldLayout_Aperture::has_normal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldLayout_Aperture::set_has_normal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldLayout_Aperture::clear_has_normal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldLayout_Aperture::clear_normal() {
  if (normal_ != NULL) normal_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_normal();
}
inline const ::energy_rec::FieldLayout_Vector& FieldLayout_Aperture::normal() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Aperture.normal)
  return normal_ != NULL ? *normal_ : *default_instance_->normal_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_Aperture::mutable_normal() {
  set_has_normal();
  if (normal_ == NULL) {
    normal_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Aperture.normal)
  return normal_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_Aperture::release_normal() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Aperture.normal)
  clear_has_normal();
  ::energy_rec::FieldLayout_Vector* temp = normal_;
  normal_ = NULL;
  return temp;
}
inline void FieldLayout_Aperture::set_allocated_normal(::energy_rec::FieldLayout_Vector* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    set_has_normal();
  } else {
    clear_has_normal();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Aperture.normal)
}

// required double radius = 3;
inline bool FieldLayout_Aperture::has_radius() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FieldLayout_Aperture::set_has_radius() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FieldLayout_Aperture::clear_has_radius() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FieldLayout_Aperture::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline double FieldLayout_Aperture::radius() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Aperture.radius)
  return radius_;
}
inline void FieldLayout_Aperture::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.Aperture.radius)
}

// -------------------------------------------------------------------

// FieldLayout_Receiver

// required string type = 1;
inline bool FieldLayout_Receiver::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldLayout_Receiver::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldLayout_Receiver::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldLayout_Receiver::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& FieldLayout_Receiver::type() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Receiver.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FieldLayout_Receiver::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.Receiver.type)
}
inline void FieldLayout_Receiver::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:energy_rec.FieldLayout.Receiver.type)
}
inline void FieldLayout_Receiver::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:energy_rec.FieldLayout.Receiver.type)
}
inline ::std::string* FieldLayout_Receiver::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Receiver.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FieldLayout_Receiver::release_type() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Receiver.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FieldLayout_Receiver::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Receiver.type)
}

// required .energy_rec.FieldLayout.Vector location = 2;
inline bool FieldLayout_Receiver::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldLayout_Receiver::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldLayout_Receiver::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldLayout_Receiver::clear_location() {
  if (location_ != NULL) location_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_location();
}
inline const ::energy_rec::FieldLayout_Vector& FieldLayout_Receiver::location() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Receiver.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_Receiver::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Receiver.location)
  return location_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_Receiver::release_location() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Receiver.location)
  clear_has_location();
  ::energy_rec::FieldLayout_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
inline void FieldLayout_Receiver::set_allocated_location(::energy_rec::FieldLayout_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Receiver.location)
}

// required .energy_rec.FieldLayout.Vector direction = 3;
inline bool FieldLayout_Receiver::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FieldLayout_Receiver::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FieldLayout_Receiver::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FieldLayout_Receiver::clear_direction() {
  if (direction_ != NULL) direction_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_direction();
}
inline const ::energy_rec::FieldLayout_Vector& FieldLayout_Receiver::direction() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Receiver.direction)
  return direction_ != NULL ? *direction_ : *default_instance_->direction_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_Receiver::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) {
    direction_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Receiver.direction)
  return direction_;
}
inline ::energy_rec::FieldLayout_Vector* FieldLayout_Receiver::release_direction() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Receiver.direction)
  clear_has_direction();
  ::energy_rec::FieldLayout_Vector* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline void FieldLayout_Receiver::set_allocated_direction(::energy_rec::FieldLayout_Vector* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Receiver.direction)
}

// required int32 resolution = 4;
inline bool FieldLayout_Receiver::has_resolution() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FieldLayout_Receiver::set_has_resolution() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FieldLayout_Receiver::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FieldLayout_Receiver::clear_resolution() {
  resolution_ = 0;
  clear_has_resolution();
}
inline ::google::protobuf::int32 FieldLayout_Receiver::resolution() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Receiver.resolution)
  return resolution_;
}
inline void FieldLayout_Receiver::set_resolution(::google::protobuf::int32 value) {
  set_has_resolution();
  resolution_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.Receiver.resolution)
}

// -------------------------------------------------------------------

// FieldLayout

// required .energy_rec.FieldLayout.Sun sun = 1;
inline bool FieldLayout::has_sun() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldLayout::set_has_sun() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldLayout::clear_has_sun() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldLayout::clear_sun() {
  if (sun_ != NULL) sun_->::energy_rec::FieldLayout_Sun::Clear();
  clear_has_sun();
}
inline const ::energy_rec::FieldLayout_Sun& FieldLayout::sun() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.sun)
  return sun_ != NULL ? *sun_ : *default_instance_->sun_;
}
inline ::energy_rec::FieldLayout_Sun* FieldLayout::mutable_sun() {
  set_has_sun();
  if (sun_ == NULL) {
    sun_ = new ::energy_rec::FieldLayout_Sun;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.sun)
  return sun_;
}
inline ::energy_rec::FieldLayout_Sun* FieldLayout::release_sun() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.sun)
  clear_has_sun();
  ::energy_rec::FieldLayout_Sun* temp = sun_;
  sun_ = NULL;
  return temp;
}
inline void FieldLayout::set_allocated_sun(::energy_rec::FieldLayout_Sun* sun) {
  delete sun_;
  sun_ = sun;
  if (sun) {
    set_has_sun();
  } else {
    clear_has_sun();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.sun)
}

// repeated .energy_rec.FieldLayout.HeliostatBlock heliostat_block = 2;
inline int FieldLayout::heliostat_block_size() const {
  return heliostat_block_.size();
}
inline void FieldLayout::clear_heliostat_block() {
  heliostat_block_.Clear();
}
inline const ::energy_rec::FieldLayout_HeliostatBlock& FieldLayout::heliostat_block(int index) const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.heliostat_block)
  return heliostat_block_.Get(index);
}
inline ::energy_rec::FieldLayout_HeliostatBlock* FieldLayout::mutable_heliostat_block(int index) {
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.heliostat_block)
  return heliostat_block_.Mutable(index);
}
inline ::energy_rec::FieldLayout_HeliostatBlock* FieldLayout::add_heliostat_block() {
  // @@protoc_insertion_point(field_add:energy_rec.FieldLayout.heliostat_block)
  return heliostat_block_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_HeliostatBlock >*
FieldLayout::mutable_heliostat_block() {
  // @@protoc_insertion_point(field_mutable_list:energy_rec.FieldLayout.heliostat_block)
  return &heliostat_block_;
}
inline const ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_HeliostatBlock >&
FieldLayout::heliostat_block() const {
  // @@protoc_insertion_point(field_list:energy_rec.FieldLayout.heliostat_block)
  return heliostat_block_;
}

// repeated .energy_rec.FieldLayout.Heliostat heliostat = 3;
inline int FieldLayout::heliostat_size() const {
  return heliostat_.size();
}
inline void FieldLayout::clear_heliostat() {
  heliostat_.Clear();
}
inline const ::energy_rec::FieldLayout_Heliostat& FieldLayout::heliostat(int index) const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.heliostat)
  return heliostat_.Get(index);
}
inline ::energy_rec::FieldLayout_Heliostat* FieldLayout::mutable_heliostat(int index) {
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.heliostat)
  return heliostat_.Mutable(index);
}
inline ::energy_rec::FieldLayout_Heliostat* FieldLayout::add_heliostat() {
  // @@protoc_insertion_point(field_add:energy_rec.FieldLayout.heliostat)
  return heliostat_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_Heliostat >*
FieldLayout::mutable_heliostat() {
  // @@protoc_insertion_point(field_mutable_list:energy_rec.FieldLayout.heliostat)
  return &heliostat_;
}
inline const ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_Heliostat >&
FieldLayout::heliostat() const {
  // @@protoc_insertion_point(field_list:energy_rec.FieldLayout.heliostat)
  return heliostat_;
}

// optional .energy_rec.FieldLayout.Aperture aperture = 4;
inline bool FieldLayout::has_aperture() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FieldLayout::set_has_aperture() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FieldLayout::clear_has_aperture() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FieldLayout::clear_aperture() {
  if (aperture_ != NULL) aperture_->::energy_rec::FieldLayout_Aperture::Clear();
  clear_has_aperture();
}
inline const ::energy_rec::FieldLayout_Aperture& FieldLayout::aperture() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.aperture)
  return aperture_ != NULL ? *aperture_ : *default_instance_->aperture_;
}
inline ::energy_rec::FieldLayout_Aperture* FieldLayout::mutable_aperture() {
  set_has_aperture();
  if (aperture_ == NULL) {
    aperture_ = new ::energy_rec::FieldLayout_Aperture;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.aperture)
  return aperture_;
}
inline ::energy_rec::FieldLayout_Aperture* FieldLayout::release_aperture() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.aperture)
  clear_has_aperture();
  ::energy_rec::FieldLayout_Aperture* temp = aperture_;
  aperture_ = NULL;
  return temp;
}
inline void FieldLayout::set_allocated_aperture(::energy_rec::FieldLayout_Aperture* aperture) {
  delete aperture_;
  aperture_ = aperture;
  if (aperture) {
    set_has_aperture();
  } else {
    clear_has_aperture();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.aperture)
}

// required .energy_rec.FieldLayout.Receiver receiver = 5;
inline bool FieldLayout::has_receiver() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FieldLayout::set_has_receiver() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FieldLayout::clear_has_receiver() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FieldLayout::clear_receiver() {
  if (receiver_ != NULL) receiver_->::energy_rec::FieldLayout_Receiver::Clear();
  clear_has_receiver();
}
inline const ::energy_rec::FieldLayout_Receiver& FieldLayout::receiver() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.receiver)
  return receiver_ != NULL ? *receiver_ : *default_instance_->receiver_;
}
inline ::energy_rec::FieldLayout_Receiver* FieldLayout::mutable_receiver() {
  set_has_receiver();
  if (receiver_ == NULL) {
    receiver_ = new ::energy_rec::FieldLayout_Receiver;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.receiver)
  return receiver_;
}
inline ::energy_rec::FieldLayout_Receiver* FieldLayout::release_receiver() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.receiver)
  clear_has_receiver();
  ::energy_rec::FieldLayout_Receiver* temp = receiver_;
  receiver_ = NULL;
  return temp;
}
inline void FieldLayout::set_allocated_receiver(::energy_rec::FieldLayout_Receiver* receiver) {
  delete receiver_;
  receiver_ = receiver;
  if (receiver) {
    set_has_receiver();
  } else {
    clear_has_receiver();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.receiver)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace energy_rec

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::energy_rec::FieldLayout_Vector_CoordinateSystem> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::energy_rec::FieldLayout_Vector_CoordinateSystem>() {
  return ::energy_rec::FieldLayout_Vector_CoordinateSystem_descriptor();
}
template <> struct is_proto_enum< ::energy_rec::FieldLayout_HeliostatType_Actuation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::energy_rec::FieldLayout_HeliostatType_Actuation>() {
  return ::energy_rec::FieldLayout_HeliostatType_Actuation_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_src_2ffield_5flayout_2eproto__INCLUDED
