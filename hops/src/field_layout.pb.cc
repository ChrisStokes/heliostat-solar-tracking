// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/field_layout.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "src/field_layout.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace energy_rec {

namespace {

const ::google::protobuf::Descriptor* FieldLayout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldLayout_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldLayout_Vector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldLayout_Vector_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FieldLayout_Vector_CoordinateSystem_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FieldLayout_EulerAnglesIntrinsicZXZ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldLayout_EulerAnglesIntrinsicZXZ_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldLayout_ManualSunConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldLayout_ManualSunConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldLayout_Sun_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldLayout_Sun_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldLayout_HeliostatType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldLayout_HeliostatType_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldLayout_HeliostatType_Vertex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldLayout_HeliostatType_Vertex_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FieldLayout_HeliostatType_Actuation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FieldLayout_HeliostatBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldLayout_HeliostatBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldLayout_Heliostat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldLayout_Heliostat_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldLayout_Aperture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldLayout_Aperture_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldLayout_Receiver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldLayout_Receiver_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_src_2ffield_5flayout_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_src_2ffield_5flayout_2eproto() {
  protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "src/field_layout.proto");
  GOOGLE_CHECK(file != NULL);
  FieldLayout_descriptor_ = file->message_type(0);
  static const int FieldLayout_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout, sun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout, heliostat_block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout, heliostat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout, aperture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout, receiver_),
  };
  FieldLayout_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FieldLayout_descriptor_,
      FieldLayout::default_instance_,
      FieldLayout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout, _has_bits_[0]),
      -1,
      -1,
      sizeof(FieldLayout),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout, _internal_metadata_),
      -1);
  FieldLayout_Vector_descriptor_ = FieldLayout_descriptor_->nested_type(0);
  static const int FieldLayout_Vector_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Vector, coordinate_system_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Vector, coordinate_),
  };
  FieldLayout_Vector_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FieldLayout_Vector_descriptor_,
      FieldLayout_Vector::default_instance_,
      FieldLayout_Vector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Vector, _has_bits_[0]),
      -1,
      -1,
      sizeof(FieldLayout_Vector),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Vector, _internal_metadata_),
      -1);
  FieldLayout_Vector_CoordinateSystem_descriptor_ = FieldLayout_Vector_descriptor_->enum_type(0);
  FieldLayout_EulerAnglesIntrinsicZXZ_descriptor_ = FieldLayout_descriptor_->nested_type(1);
  static const int FieldLayout_EulerAnglesIntrinsicZXZ_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_EulerAnglesIntrinsicZXZ, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_EulerAnglesIntrinsicZXZ, beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_EulerAnglesIntrinsicZXZ, gamma_),
  };
  FieldLayout_EulerAnglesIntrinsicZXZ_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FieldLayout_EulerAnglesIntrinsicZXZ_descriptor_,
      FieldLayout_EulerAnglesIntrinsicZXZ::default_instance_,
      FieldLayout_EulerAnglesIntrinsicZXZ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_EulerAnglesIntrinsicZXZ, _has_bits_[0]),
      -1,
      -1,
      sizeof(FieldLayout_EulerAnglesIntrinsicZXZ),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_EulerAnglesIntrinsicZXZ, _internal_metadata_),
      -1);
  FieldLayout_ManualSunConfig_descriptor_ = FieldLayout_descriptor_->nested_type(2);
  static const int FieldLayout_ManualSunConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_ManualSunConfig, sun_vector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_ManualSunConfig, dni_),
  };
  FieldLayout_ManualSunConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FieldLayout_ManualSunConfig_descriptor_,
      FieldLayout_ManualSunConfig::default_instance_,
      FieldLayout_ManualSunConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_ManualSunConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(FieldLayout_ManualSunConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_ManualSunConfig, _internal_metadata_),
      -1);
  FieldLayout_Sun_descriptor_ = FieldLayout_descriptor_->nested_type(3);
  static const int FieldLayout_Sun_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Sun, automatic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Sun, field_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Sun, sun_config_),
  };
  FieldLayout_Sun_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FieldLayout_Sun_descriptor_,
      FieldLayout_Sun::default_instance_,
      FieldLayout_Sun_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Sun, _has_bits_[0]),
      -1,
      -1,
      sizeof(FieldLayout_Sun),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Sun, _internal_metadata_),
      -1);
  FieldLayout_HeliostatType_descriptor_ = FieldLayout_descriptor_->nested_type(4);
  static const int FieldLayout_HeliostatType_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatType, reflectivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatType, focal_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatType, actuation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatType, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatType, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatType, vertex_),
  };
  FieldLayout_HeliostatType_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FieldLayout_HeliostatType_descriptor_,
      FieldLayout_HeliostatType::default_instance_,
      FieldLayout_HeliostatType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatType, _has_bits_[0]),
      -1,
      -1,
      sizeof(FieldLayout_HeliostatType),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatType, _internal_metadata_),
      -1);
  FieldLayout_HeliostatType_Vertex_descriptor_ = FieldLayout_HeliostatType_descriptor_->nested_type(0);
  static const int FieldLayout_HeliostatType_Vertex_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatType_Vertex, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatType_Vertex, y_),
  };
  FieldLayout_HeliostatType_Vertex_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FieldLayout_HeliostatType_Vertex_descriptor_,
      FieldLayout_HeliostatType_Vertex::default_instance_,
      FieldLayout_HeliostatType_Vertex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatType_Vertex, _has_bits_[0]),
      -1,
      -1,
      sizeof(FieldLayout_HeliostatType_Vertex),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatType_Vertex, _internal_metadata_),
      -1);
  FieldLayout_HeliostatType_Actuation_descriptor_ = FieldLayout_HeliostatType_descriptor_->enum_type(0);
  FieldLayout_HeliostatBlock_descriptor_ = FieldLayout_descriptor_->nested_type(5);
  static const int FieldLayout_HeliostatBlock_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatBlock, heliostat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatBlock, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatBlock, x_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatBlock, num_x_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatBlock, y_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatBlock, num_y_steps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatBlock, aim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatBlock, frame_orientation_),
  };
  FieldLayout_HeliostatBlock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FieldLayout_HeliostatBlock_descriptor_,
      FieldLayout_HeliostatBlock::default_instance_,
      FieldLayout_HeliostatBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatBlock, _has_bits_[0]),
      -1,
      -1,
      sizeof(FieldLayout_HeliostatBlock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_HeliostatBlock, _internal_metadata_),
      -1);
  FieldLayout_Heliostat_descriptor_ = FieldLayout_descriptor_->nested_type(6);
  static const int FieldLayout_Heliostat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Heliostat, heliostat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Heliostat, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Heliostat, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Heliostat, aim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Heliostat, frame_orientation_),
  };
  FieldLayout_Heliostat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FieldLayout_Heliostat_descriptor_,
      FieldLayout_Heliostat::default_instance_,
      FieldLayout_Heliostat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Heliostat, _has_bits_[0]),
      -1,
      -1,
      sizeof(FieldLayout_Heliostat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Heliostat, _internal_metadata_),
      -1);
  FieldLayout_Aperture_descriptor_ = FieldLayout_descriptor_->nested_type(7);
  static const int FieldLayout_Aperture_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Aperture, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Aperture, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Aperture, radius_),
  };
  FieldLayout_Aperture_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FieldLayout_Aperture_descriptor_,
      FieldLayout_Aperture::default_instance_,
      FieldLayout_Aperture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Aperture, _has_bits_[0]),
      -1,
      -1,
      sizeof(FieldLayout_Aperture),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Aperture, _internal_metadata_),
      -1);
  FieldLayout_Receiver_descriptor_ = FieldLayout_descriptor_->nested_type(8);
  static const int FieldLayout_Receiver_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Receiver, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Receiver, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Receiver, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Receiver, resolution_),
  };
  FieldLayout_Receiver_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FieldLayout_Receiver_descriptor_,
      FieldLayout_Receiver::default_instance_,
      FieldLayout_Receiver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Receiver, _has_bits_[0]),
      -1,
      -1,
      sizeof(FieldLayout_Receiver),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldLayout_Receiver, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_src_2ffield_5flayout_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FieldLayout_descriptor_, &FieldLayout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FieldLayout_Vector_descriptor_, &FieldLayout_Vector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FieldLayout_EulerAnglesIntrinsicZXZ_descriptor_, &FieldLayout_EulerAnglesIntrinsicZXZ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FieldLayout_ManualSunConfig_descriptor_, &FieldLayout_ManualSunConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FieldLayout_Sun_descriptor_, &FieldLayout_Sun::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FieldLayout_HeliostatType_descriptor_, &FieldLayout_HeliostatType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FieldLayout_HeliostatType_Vertex_descriptor_, &FieldLayout_HeliostatType_Vertex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FieldLayout_HeliostatBlock_descriptor_, &FieldLayout_HeliostatBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FieldLayout_Heliostat_descriptor_, &FieldLayout_Heliostat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FieldLayout_Aperture_descriptor_, &FieldLayout_Aperture::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FieldLayout_Receiver_descriptor_, &FieldLayout_Receiver::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_src_2ffield_5flayout_2eproto() {
  delete FieldLayout::default_instance_;
  delete FieldLayout_reflection_;
  delete FieldLayout_Vector::default_instance_;
  delete FieldLayout_Vector_reflection_;
  delete FieldLayout_EulerAnglesIntrinsicZXZ::default_instance_;
  delete FieldLayout_EulerAnglesIntrinsicZXZ_reflection_;
  delete FieldLayout_ManualSunConfig::default_instance_;
  delete FieldLayout_ManualSunConfig_reflection_;
  delete FieldLayout_Sun::default_instance_;
  delete FieldLayout_Sun_reflection_;
  delete FieldLayout_HeliostatType::default_instance_;
  delete FieldLayout_HeliostatType_reflection_;
  delete FieldLayout_HeliostatType_Vertex::default_instance_;
  delete FieldLayout_HeliostatType_Vertex_reflection_;
  delete FieldLayout_HeliostatBlock::default_instance_;
  delete FieldLayout_HeliostatBlock_reflection_;
  delete FieldLayout_Heliostat::default_instance_;
  delete FieldLayout_Heliostat_reflection_;
  delete FieldLayout_Aperture::default_instance_;
  delete FieldLayout_Aperture_reflection_;
  delete FieldLayout_Receiver::default_instance_;
  delete FieldLayout_Receiver_reflection_;
}

void protobuf_AddDesc_src_2ffield_5flayout_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_src_2ffield_5flayout_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026src/field_layout.proto\022\nenergy_rec\"\357\017\n"
    "\013FieldLayout\022(\n\003sun\030\001 \002(\0132\033.energy_rec.F"
    "ieldLayout.Sun\022\?\n\017heliostat_block\030\002 \003(\0132"
    "&.energy_rec.FieldLayout.HeliostatBlock\022"
    "4\n\theliostat\030\003 \003(\0132!.energy_rec.FieldLay"
    "out.Heliostat\0222\n\010aperture\030\004 \001(\0132 .energy"
    "_rec.FieldLayout.Aperture\0222\n\010receiver\030\005 "
    "\002(\0132 .energy_rec.FieldLayout.Receiver\032\275\001"
    "\n\006Vector\022J\n\021coordinate_system\030\001 \002(\0162/.en"
    "ergy_rec.FieldLayout.Vector.CoordinateSy"
    "stem\022\022\n\ncoordinate\030\002 \003(\001\"S\n\020CoordinateSy"
    "stem\022\r\n\tCARTESIAN\020\000\022\017\n\013CYLINDRICAL\020\001\022\r\n\t"
    "SPHERICAL\020\002\022\020\n\014ASTRONOMICAL\020\003\032N\n\027EulerAn"
    "glesIntrinsicZXZ\022\020\n\005alpha\030\001 \002(\001:\0010\022\017\n\004be"
    "ta\030\002 \002(\001:\0010\022\020\n\005gamma\030\003 \002(\001:\0010\032R\n\017ManualS"
    "unConfig\0222\n\nsun_vector\030\001 \002(\0132\036.energy_re"
    "c.FieldLayout.Vector\022\013\n\003dni\030\002 \002(\001\032\215\001\n\003Su"
    "n\022\021\n\tautomatic\030\001 \002(\010\0226\n\016field_location\030\002"
    " \001(\0132\036.energy_rec.FieldLayout.Vector\022;\n\n"
    "sun_config\030\003 \003(\0132\'.energy_rec.FieldLayou"
    "t.ManualSunConfig\032\306\002\n\rHeliostatType\022\027\n\014r"
    "eflectivity\030\001 \001(\001:\0011\022\027\n\014focal_length\030\002 \001"
    "(\001:\0010\022J\n\tactuation\030\003 \001(\0162/.energy_rec.Fi"
    "eldLayout.HeliostatType.Actuation:\006DIREC"
    "T\022\020\n\005width\030\004 \001(\001:\0013\022\021\n\006height\030\005 \001(\001:\0012\022<"
    "\n\006vertex\030\006 \003(\0132,.energy_rec.FieldLayout."
    "HeliostatType.Vertex\032\036\n\006Vertex\022\t\n\001x\030\001 \002("
    "\001\022\t\n\001y\030\002 \002(\001\"4\n\tActuation\022\n\n\006DIRECT\020\000\022\013\n"
    "\007AZI_ELE\020\001\022\016\n\nPITCH_ROLL\020\002\032\201\003\n\016Heliostat"
    "Block\022=\n\016heliostat_type\030\001 \002(\0132%.energy_r"
    "ec.FieldLayout.HeliostatType\022-\n\005start\030\002 "
    "\002(\0132\036.energy_rec.FieldLayout.Vector\022.\n\006x"
    "_step\030\003 \002(\0132\036.energy_rec.FieldLayout.Vec"
    "tor\022\023\n\013num_x_steps\030\004 \002(\005\022.\n\006y_step\030\005 \002(\013"
    "2\036.energy_rec.FieldLayout.Vector\022\023\n\013num_"
    "y_steps\030\006 \002(\005\022+\n\003aim\030\007 \002(\0132\036.energy_rec."
    "FieldLayout.Vector\022J\n\021frame_orientation\030"
    "\010 \001(\0132/.energy_rec.FieldLayout.EulerAngl"
    "esIntrinsicZXZ\032\203\002\n\tHeliostat\022=\n\016heliosta"
    "t_type\030\001 \002(\0132%.energy_rec.FieldLayout.He"
    "liostatType\022\014\n\004name\030\002 \001(\t\0220\n\010location\030\003 "
    "\002(\0132\036.energy_rec.FieldLayout.Vector\022+\n\003a"
    "im\030\004 \002(\0132\036.energy_rec.FieldLayout.Vector"
    "\022J\n\021frame_orientation\030\005 \001(\0132/.energy_rec"
    ".FieldLayout.EulerAnglesIntrinsicZXZ\032|\n\010"
    "Aperture\0220\n\010location\030\001 \002(\0132\036.energy_rec."
    "FieldLayout.Vector\022.\n\006normal\030\002 \002(\0132\036.ene"
    "rgy_rec.FieldLayout.Vector\022\016\n\006radius\030\003 \002"
    "(\001\032\221\001\n\010Receiver\022\014\n\004type\030\001 \002(\t\0220\n\010locatio"
    "n\030\002 \002(\0132\036.energy_rec.FieldLayout.Vector\022"
    "1\n\tdirection\030\003 \002(\0132\036.energy_rec.FieldLay"
    "out.Vector\022\022\n\nresolution\030\004 \002(\005", 2070);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "src/field_layout.proto", &protobuf_RegisterTypes);
  FieldLayout::default_instance_ = new FieldLayout();
  FieldLayout_Vector::default_instance_ = new FieldLayout_Vector();
  FieldLayout_EulerAnglesIntrinsicZXZ::default_instance_ = new FieldLayout_EulerAnglesIntrinsicZXZ();
  FieldLayout_ManualSunConfig::default_instance_ = new FieldLayout_ManualSunConfig();
  FieldLayout_Sun::default_instance_ = new FieldLayout_Sun();
  FieldLayout_HeliostatType::default_instance_ = new FieldLayout_HeliostatType();
  FieldLayout_HeliostatType_Vertex::default_instance_ = new FieldLayout_HeliostatType_Vertex();
  FieldLayout_HeliostatBlock::default_instance_ = new FieldLayout_HeliostatBlock();
  FieldLayout_Heliostat::default_instance_ = new FieldLayout_Heliostat();
  FieldLayout_Aperture::default_instance_ = new FieldLayout_Aperture();
  FieldLayout_Receiver::default_instance_ = new FieldLayout_Receiver();
  FieldLayout::default_instance_->InitAsDefaultInstance();
  FieldLayout_Vector::default_instance_->InitAsDefaultInstance();
  FieldLayout_EulerAnglesIntrinsicZXZ::default_instance_->InitAsDefaultInstance();
  FieldLayout_ManualSunConfig::default_instance_->InitAsDefaultInstance();
  FieldLayout_Sun::default_instance_->InitAsDefaultInstance();
  FieldLayout_HeliostatType::default_instance_->InitAsDefaultInstance();
  FieldLayout_HeliostatType_Vertex::default_instance_->InitAsDefaultInstance();
  FieldLayout_HeliostatBlock::default_instance_->InitAsDefaultInstance();
  FieldLayout_Heliostat::default_instance_->InitAsDefaultInstance();
  FieldLayout_Aperture::default_instance_->InitAsDefaultInstance();
  FieldLayout_Receiver::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_src_2ffield_5flayout_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_src_2ffield_5flayout_2eproto {
  StaticDescriptorInitializer_src_2ffield_5flayout_2eproto() {
    protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  }
} static_descriptor_initializer_src_2ffield_5flayout_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* FieldLayout_Vector_CoordinateSystem_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldLayout_Vector_CoordinateSystem_descriptor_;
}
bool FieldLayout_Vector_CoordinateSystem_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FieldLayout_Vector_CoordinateSystem FieldLayout_Vector::CARTESIAN;
const FieldLayout_Vector_CoordinateSystem FieldLayout_Vector::CYLINDRICAL;
const FieldLayout_Vector_CoordinateSystem FieldLayout_Vector::SPHERICAL;
const FieldLayout_Vector_CoordinateSystem FieldLayout_Vector::ASTRONOMICAL;
const FieldLayout_Vector_CoordinateSystem FieldLayout_Vector::CoordinateSystem_MIN;
const FieldLayout_Vector_CoordinateSystem FieldLayout_Vector::CoordinateSystem_MAX;
const int FieldLayout_Vector::CoordinateSystem_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldLayout_Vector::kCoordinateSystemFieldNumber;
const int FieldLayout_Vector::kCoordinateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldLayout_Vector::FieldLayout_Vector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:energy_rec.FieldLayout.Vector)
}

void FieldLayout_Vector::InitAsDefaultInstance() {
}

FieldLayout_Vector::FieldLayout_Vector(const FieldLayout_Vector& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:energy_rec.FieldLayout.Vector)
}

void FieldLayout_Vector::SharedCtor() {
  _cached_size_ = 0;
  coordinate_system_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldLayout_Vector::~FieldLayout_Vector() {
  // @@protoc_insertion_point(destructor:energy_rec.FieldLayout.Vector)
  SharedDtor();
}

void FieldLayout_Vector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FieldLayout_Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldLayout_Vector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldLayout_Vector_descriptor_;
}

const FieldLayout_Vector& FieldLayout_Vector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  return *default_instance_;
}

FieldLayout_Vector* FieldLayout_Vector::default_instance_ = NULL;

FieldLayout_Vector* FieldLayout_Vector::New(::google::protobuf::Arena* arena) const {
  FieldLayout_Vector* n = new FieldLayout_Vector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldLayout_Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:energy_rec.FieldLayout.Vector)
  coordinate_system_ = 0;
  coordinate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FieldLayout_Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:energy_rec.FieldLayout.Vector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .energy_rec.FieldLayout.Vector.CoordinateSystem coordinate_system = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::energy_rec::FieldLayout_Vector_CoordinateSystem_IsValid(value)) {
            set_coordinate_system(static_cast< ::energy_rec::FieldLayout_Vector_CoordinateSystem >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_coordinate;
        break;
      }

      // repeated double coordinate = 2;
      case 2: {
        if (tag == 17) {
         parse_coordinate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_coordinate())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_coordinate())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_coordinate;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:energy_rec.FieldLayout.Vector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:energy_rec.FieldLayout.Vector)
  return false;
#undef DO_
}

void FieldLayout_Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:energy_rec.FieldLayout.Vector)
  // required .energy_rec.FieldLayout.Vector.CoordinateSystem coordinate_system = 1;
  if (has_coordinate_system()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->coordinate_system(), output);
  }

  // repeated double coordinate = 2;
  for (int i = 0; i < this->coordinate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->coordinate(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:energy_rec.FieldLayout.Vector)
}

::google::protobuf::uint8* FieldLayout_Vector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:energy_rec.FieldLayout.Vector)
  // required .energy_rec.FieldLayout.Vector.CoordinateSystem coordinate_system = 1;
  if (has_coordinate_system()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->coordinate_system(), target);
  }

  // repeated double coordinate = 2;
  for (int i = 0; i < this->coordinate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->coordinate(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:energy_rec.FieldLayout.Vector)
  return target;
}

int FieldLayout_Vector::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:energy_rec.FieldLayout.Vector)
  int total_size = 0;

  // required .energy_rec.FieldLayout.Vector.CoordinateSystem coordinate_system = 1;
  if (has_coordinate_system()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->coordinate_system());
  }
  // repeated double coordinate = 2;
  {
    int data_size = 0;
    data_size = 8 * this->coordinate_size();
    total_size += 1 * this->coordinate_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldLayout_Vector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:energy_rec.FieldLayout.Vector)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FieldLayout_Vector* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldLayout_Vector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:energy_rec.FieldLayout.Vector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:energy_rec.FieldLayout.Vector)
    MergeFrom(*source);
  }
}

void FieldLayout_Vector::MergeFrom(const FieldLayout_Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:energy_rec.FieldLayout.Vector)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  coordinate_.MergeFrom(from.coordinate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coordinate_system()) {
      set_coordinate_system(from.coordinate_system());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FieldLayout_Vector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:energy_rec.FieldLayout.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldLayout_Vector::CopyFrom(const FieldLayout_Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:energy_rec.FieldLayout.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldLayout_Vector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FieldLayout_Vector::Swap(FieldLayout_Vector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldLayout_Vector::InternalSwap(FieldLayout_Vector* other) {
  std::swap(coordinate_system_, other->coordinate_system_);
  coordinate_.UnsafeArenaSwap(&other->coordinate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldLayout_Vector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldLayout_Vector_descriptor_;
  metadata.reflection = FieldLayout_Vector_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldLayout_EulerAnglesIntrinsicZXZ::kAlphaFieldNumber;
const int FieldLayout_EulerAnglesIntrinsicZXZ::kBetaFieldNumber;
const int FieldLayout_EulerAnglesIntrinsicZXZ::kGammaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldLayout_EulerAnglesIntrinsicZXZ::FieldLayout_EulerAnglesIntrinsicZXZ()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ)
}

void FieldLayout_EulerAnglesIntrinsicZXZ::InitAsDefaultInstance() {
}

FieldLayout_EulerAnglesIntrinsicZXZ::FieldLayout_EulerAnglesIntrinsicZXZ(const FieldLayout_EulerAnglesIntrinsicZXZ& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ)
}

void FieldLayout_EulerAnglesIntrinsicZXZ::SharedCtor() {
  _cached_size_ = 0;
  alpha_ = 0;
  beta_ = 0;
  gamma_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldLayout_EulerAnglesIntrinsicZXZ::~FieldLayout_EulerAnglesIntrinsicZXZ() {
  // @@protoc_insertion_point(destructor:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ)
  SharedDtor();
}

void FieldLayout_EulerAnglesIntrinsicZXZ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FieldLayout_EulerAnglesIntrinsicZXZ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldLayout_EulerAnglesIntrinsicZXZ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldLayout_EulerAnglesIntrinsicZXZ_descriptor_;
}

const FieldLayout_EulerAnglesIntrinsicZXZ& FieldLayout_EulerAnglesIntrinsicZXZ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  return *default_instance_;
}

FieldLayout_EulerAnglesIntrinsicZXZ* FieldLayout_EulerAnglesIntrinsicZXZ::default_instance_ = NULL;

FieldLayout_EulerAnglesIntrinsicZXZ* FieldLayout_EulerAnglesIntrinsicZXZ::New(::google::protobuf::Arena* arena) const {
  FieldLayout_EulerAnglesIntrinsicZXZ* n = new FieldLayout_EulerAnglesIntrinsicZXZ;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldLayout_EulerAnglesIntrinsicZXZ::Clear() {
// @@protoc_insertion_point(message_clear_start:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FieldLayout_EulerAnglesIntrinsicZXZ, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FieldLayout_EulerAnglesIntrinsicZXZ*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(alpha_, gamma_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FieldLayout_EulerAnglesIntrinsicZXZ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double alpha = 1 [default = 0];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_beta;
        break;
      }

      // required double beta = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beta_)));
          set_has_beta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_gamma;
        break;
      }

      // required double gamma = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_gamma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gamma_)));
          set_has_gamma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ)
  return false;
#undef DO_
}

void FieldLayout_EulerAnglesIntrinsicZXZ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ)
  // required double alpha = 1 [default = 0];
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->alpha(), output);
  }

  // required double beta = 2 [default = 0];
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->beta(), output);
  }

  // required double gamma = 3 [default = 0];
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->gamma(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ)
}

::google::protobuf::uint8* FieldLayout_EulerAnglesIntrinsicZXZ::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ)
  // required double alpha = 1 [default = 0];
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->alpha(), target);
  }

  // required double beta = 2 [default = 0];
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->beta(), target);
  }

  // required double gamma = 3 [default = 0];
  if (has_gamma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->gamma(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ)
  return target;
}

int FieldLayout_EulerAnglesIntrinsicZXZ::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ)
  int total_size = 0;

  if (has_alpha()) {
    // required double alpha = 1 [default = 0];
    total_size += 1 + 8;
  }

  if (has_beta()) {
    // required double beta = 2 [default = 0];
    total_size += 1 + 8;
  }

  if (has_gamma()) {
    // required double gamma = 3 [default = 0];
    total_size += 1 + 8;
  }

  return total_size;
}
int FieldLayout_EulerAnglesIntrinsicZXZ::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double alpha = 1 [default = 0];
    total_size += 1 + 8;

    // required double beta = 2 [default = 0];
    total_size += 1 + 8;

    // required double gamma = 3 [default = 0];
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldLayout_EulerAnglesIntrinsicZXZ::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FieldLayout_EulerAnglesIntrinsicZXZ* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldLayout_EulerAnglesIntrinsicZXZ>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ)
    MergeFrom(*source);
  }
}

void FieldLayout_EulerAnglesIntrinsicZXZ::MergeFrom(const FieldLayout_EulerAnglesIntrinsicZXZ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_beta()) {
      set_beta(from.beta());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FieldLayout_EulerAnglesIntrinsicZXZ::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldLayout_EulerAnglesIntrinsicZXZ::CopyFrom(const FieldLayout_EulerAnglesIntrinsicZXZ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldLayout_EulerAnglesIntrinsicZXZ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FieldLayout_EulerAnglesIntrinsicZXZ::Swap(FieldLayout_EulerAnglesIntrinsicZXZ* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldLayout_EulerAnglesIntrinsicZXZ::InternalSwap(FieldLayout_EulerAnglesIntrinsicZXZ* other) {
  std::swap(alpha_, other->alpha_);
  std::swap(beta_, other->beta_);
  std::swap(gamma_, other->gamma_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldLayout_EulerAnglesIntrinsicZXZ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldLayout_EulerAnglesIntrinsicZXZ_descriptor_;
  metadata.reflection = FieldLayout_EulerAnglesIntrinsicZXZ_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldLayout_ManualSunConfig::kSunVectorFieldNumber;
const int FieldLayout_ManualSunConfig::kDniFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldLayout_ManualSunConfig::FieldLayout_ManualSunConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:energy_rec.FieldLayout.ManualSunConfig)
}

void FieldLayout_ManualSunConfig::InitAsDefaultInstance() {
  sun_vector_ = const_cast< ::energy_rec::FieldLayout_Vector*>(&::energy_rec::FieldLayout_Vector::default_instance());
}

FieldLayout_ManualSunConfig::FieldLayout_ManualSunConfig(const FieldLayout_ManualSunConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:energy_rec.FieldLayout.ManualSunConfig)
}

void FieldLayout_ManualSunConfig::SharedCtor() {
  _cached_size_ = 0;
  sun_vector_ = NULL;
  dni_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldLayout_ManualSunConfig::~FieldLayout_ManualSunConfig() {
  // @@protoc_insertion_point(destructor:energy_rec.FieldLayout.ManualSunConfig)
  SharedDtor();
}

void FieldLayout_ManualSunConfig::SharedDtor() {
  if (this != default_instance_) {
    delete sun_vector_;
  }
}

void FieldLayout_ManualSunConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldLayout_ManualSunConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldLayout_ManualSunConfig_descriptor_;
}

const FieldLayout_ManualSunConfig& FieldLayout_ManualSunConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  return *default_instance_;
}

FieldLayout_ManualSunConfig* FieldLayout_ManualSunConfig::default_instance_ = NULL;

FieldLayout_ManualSunConfig* FieldLayout_ManualSunConfig::New(::google::protobuf::Arena* arena) const {
  FieldLayout_ManualSunConfig* n = new FieldLayout_ManualSunConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldLayout_ManualSunConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:energy_rec.FieldLayout.ManualSunConfig)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_sun_vector()) {
      if (sun_vector_ != NULL) sun_vector_->::energy_rec::FieldLayout_Vector::Clear();
    }
    dni_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FieldLayout_ManualSunConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:energy_rec.FieldLayout.ManualSunConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .energy_rec.FieldLayout.Vector sun_vector = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sun_vector()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_dni;
        break;
      }

      // required double dni = 2;
      case 2: {
        if (tag == 17) {
         parse_dni:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dni_)));
          set_has_dni();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:energy_rec.FieldLayout.ManualSunConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:energy_rec.FieldLayout.ManualSunConfig)
  return false;
#undef DO_
}

void FieldLayout_ManualSunConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:energy_rec.FieldLayout.ManualSunConfig)
  // required .energy_rec.FieldLayout.Vector sun_vector = 1;
  if (has_sun_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sun_vector_, output);
  }

  // required double dni = 2;
  if (has_dni()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dni(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:energy_rec.FieldLayout.ManualSunConfig)
}

::google::protobuf::uint8* FieldLayout_ManualSunConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:energy_rec.FieldLayout.ManualSunConfig)
  // required .energy_rec.FieldLayout.Vector sun_vector = 1;
  if (has_sun_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->sun_vector_, false, target);
  }

  // required double dni = 2;
  if (has_dni()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dni(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:energy_rec.FieldLayout.ManualSunConfig)
  return target;
}

int FieldLayout_ManualSunConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:energy_rec.FieldLayout.ManualSunConfig)
  int total_size = 0;

  if (has_sun_vector()) {
    // required .energy_rec.FieldLayout.Vector sun_vector = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sun_vector_);
  }

  if (has_dni()) {
    // required double dni = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
int FieldLayout_ManualSunConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:energy_rec.FieldLayout.ManualSunConfig)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .energy_rec.FieldLayout.Vector sun_vector = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sun_vector_);

    // required double dni = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldLayout_ManualSunConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:energy_rec.FieldLayout.ManualSunConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FieldLayout_ManualSunConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldLayout_ManualSunConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:energy_rec.FieldLayout.ManualSunConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:energy_rec.FieldLayout.ManualSunConfig)
    MergeFrom(*source);
  }
}

void FieldLayout_ManualSunConfig::MergeFrom(const FieldLayout_ManualSunConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:energy_rec.FieldLayout.ManualSunConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sun_vector()) {
      mutable_sun_vector()->::energy_rec::FieldLayout_Vector::MergeFrom(from.sun_vector());
    }
    if (from.has_dni()) {
      set_dni(from.dni());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FieldLayout_ManualSunConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:energy_rec.FieldLayout.ManualSunConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldLayout_ManualSunConfig::CopyFrom(const FieldLayout_ManualSunConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:energy_rec.FieldLayout.ManualSunConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldLayout_ManualSunConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_sun_vector()) {
    if (!this->sun_vector_->IsInitialized()) return false;
  }
  return true;
}

void FieldLayout_ManualSunConfig::Swap(FieldLayout_ManualSunConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldLayout_ManualSunConfig::InternalSwap(FieldLayout_ManualSunConfig* other) {
  std::swap(sun_vector_, other->sun_vector_);
  std::swap(dni_, other->dni_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldLayout_ManualSunConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldLayout_ManualSunConfig_descriptor_;
  metadata.reflection = FieldLayout_ManualSunConfig_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldLayout_Sun::kAutomaticFieldNumber;
const int FieldLayout_Sun::kFieldLocationFieldNumber;
const int FieldLayout_Sun::kSunConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldLayout_Sun::FieldLayout_Sun()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:energy_rec.FieldLayout.Sun)
}

void FieldLayout_Sun::InitAsDefaultInstance() {
  field_location_ = const_cast< ::energy_rec::FieldLayout_Vector*>(&::energy_rec::FieldLayout_Vector::default_instance());
}

FieldLayout_Sun::FieldLayout_Sun(const FieldLayout_Sun& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:energy_rec.FieldLayout.Sun)
}

void FieldLayout_Sun::SharedCtor() {
  _cached_size_ = 0;
  automatic_ = false;
  field_location_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldLayout_Sun::~FieldLayout_Sun() {
  // @@protoc_insertion_point(destructor:energy_rec.FieldLayout.Sun)
  SharedDtor();
}

void FieldLayout_Sun::SharedDtor() {
  if (this != default_instance_) {
    delete field_location_;
  }
}

void FieldLayout_Sun::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldLayout_Sun::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldLayout_Sun_descriptor_;
}

const FieldLayout_Sun& FieldLayout_Sun::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  return *default_instance_;
}

FieldLayout_Sun* FieldLayout_Sun::default_instance_ = NULL;

FieldLayout_Sun* FieldLayout_Sun::New(::google::protobuf::Arena* arena) const {
  FieldLayout_Sun* n = new FieldLayout_Sun;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldLayout_Sun::Clear() {
// @@protoc_insertion_point(message_clear_start:energy_rec.FieldLayout.Sun)
  if (_has_bits_[0 / 32] & 3u) {
    automatic_ = false;
    if (has_field_location()) {
      if (field_location_ != NULL) field_location_->::energy_rec::FieldLayout_Vector::Clear();
    }
  }
  sun_config_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FieldLayout_Sun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:energy_rec.FieldLayout.Sun)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool automatic = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &automatic_)));
          set_has_automatic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_field_location;
        break;
      }

      // optional .energy_rec.FieldLayout.Vector field_location = 2;
      case 2: {
        if (tag == 18) {
         parse_field_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sun_config;
        break;
      }

      // repeated .energy_rec.FieldLayout.ManualSunConfig sun_config = 3;
      case 3: {
        if (tag == 26) {
         parse_sun_config:
          DO_(input->IncrementRecursionDepth());
         parse_loop_sun_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sun_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_sun_config;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:energy_rec.FieldLayout.Sun)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:energy_rec.FieldLayout.Sun)
  return false;
#undef DO_
}

void FieldLayout_Sun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:energy_rec.FieldLayout.Sun)
  // required bool automatic = 1;
  if (has_automatic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->automatic(), output);
  }

  // optional .energy_rec.FieldLayout.Vector field_location = 2;
  if (has_field_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->field_location_, output);
  }

  // repeated .energy_rec.FieldLayout.ManualSunConfig sun_config = 3;
  for (unsigned int i = 0, n = this->sun_config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sun_config(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:energy_rec.FieldLayout.Sun)
}

::google::protobuf::uint8* FieldLayout_Sun::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:energy_rec.FieldLayout.Sun)
  // required bool automatic = 1;
  if (has_automatic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->automatic(), target);
  }

  // optional .energy_rec.FieldLayout.Vector field_location = 2;
  if (has_field_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->field_location_, false, target);
  }

  // repeated .energy_rec.FieldLayout.ManualSunConfig sun_config = 3;
  for (unsigned int i = 0, n = this->sun_config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->sun_config(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:energy_rec.FieldLayout.Sun)
  return target;
}

int FieldLayout_Sun::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:energy_rec.FieldLayout.Sun)
  int total_size = 0;

  // required bool automatic = 1;
  if (has_automatic()) {
    total_size += 1 + 1;
  }
  // optional .energy_rec.FieldLayout.Vector field_location = 2;
  if (has_field_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_location_);
  }

  // repeated .energy_rec.FieldLayout.ManualSunConfig sun_config = 3;
  total_size += 1 * this->sun_config_size();
  for (int i = 0; i < this->sun_config_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sun_config(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldLayout_Sun::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:energy_rec.FieldLayout.Sun)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FieldLayout_Sun* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldLayout_Sun>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:energy_rec.FieldLayout.Sun)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:energy_rec.FieldLayout.Sun)
    MergeFrom(*source);
  }
}

void FieldLayout_Sun::MergeFrom(const FieldLayout_Sun& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:energy_rec.FieldLayout.Sun)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  sun_config_.MergeFrom(from.sun_config_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_automatic()) {
      set_automatic(from.automatic());
    }
    if (from.has_field_location()) {
      mutable_field_location()->::energy_rec::FieldLayout_Vector::MergeFrom(from.field_location());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FieldLayout_Sun::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:energy_rec.FieldLayout.Sun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldLayout_Sun::CopyFrom(const FieldLayout_Sun& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:energy_rec.FieldLayout.Sun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldLayout_Sun::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_field_location()) {
    if (!this->field_location_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->sun_config())) return false;
  return true;
}

void FieldLayout_Sun::Swap(FieldLayout_Sun* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldLayout_Sun::InternalSwap(FieldLayout_Sun* other) {
  std::swap(automatic_, other->automatic_);
  std::swap(field_location_, other->field_location_);
  sun_config_.UnsafeArenaSwap(&other->sun_config_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldLayout_Sun::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldLayout_Sun_descriptor_;
  metadata.reflection = FieldLayout_Sun_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* FieldLayout_HeliostatType_Actuation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldLayout_HeliostatType_Actuation_descriptor_;
}
bool FieldLayout_HeliostatType_Actuation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FieldLayout_HeliostatType_Actuation FieldLayout_HeliostatType::DIRECT;
const FieldLayout_HeliostatType_Actuation FieldLayout_HeliostatType::AZI_ELE;
const FieldLayout_HeliostatType_Actuation FieldLayout_HeliostatType::PITCH_ROLL;
const FieldLayout_HeliostatType_Actuation FieldLayout_HeliostatType::Actuation_MIN;
const FieldLayout_HeliostatType_Actuation FieldLayout_HeliostatType::Actuation_MAX;
const int FieldLayout_HeliostatType::Actuation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldLayout_HeliostatType_Vertex::kXFieldNumber;
const int FieldLayout_HeliostatType_Vertex::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldLayout_HeliostatType_Vertex::FieldLayout_HeliostatType_Vertex()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:energy_rec.FieldLayout.HeliostatType.Vertex)
}

void FieldLayout_HeliostatType_Vertex::InitAsDefaultInstance() {
}

FieldLayout_HeliostatType_Vertex::FieldLayout_HeliostatType_Vertex(const FieldLayout_HeliostatType_Vertex& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:energy_rec.FieldLayout.HeliostatType.Vertex)
}

void FieldLayout_HeliostatType_Vertex::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldLayout_HeliostatType_Vertex::~FieldLayout_HeliostatType_Vertex() {
  // @@protoc_insertion_point(destructor:energy_rec.FieldLayout.HeliostatType.Vertex)
  SharedDtor();
}

void FieldLayout_HeliostatType_Vertex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FieldLayout_HeliostatType_Vertex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldLayout_HeliostatType_Vertex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldLayout_HeliostatType_Vertex_descriptor_;
}

const FieldLayout_HeliostatType_Vertex& FieldLayout_HeliostatType_Vertex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  return *default_instance_;
}

FieldLayout_HeliostatType_Vertex* FieldLayout_HeliostatType_Vertex::default_instance_ = NULL;

FieldLayout_HeliostatType_Vertex* FieldLayout_HeliostatType_Vertex::New(::google::protobuf::Arena* arena) const {
  FieldLayout_HeliostatType_Vertex* n = new FieldLayout_HeliostatType_Vertex;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldLayout_HeliostatType_Vertex::Clear() {
// @@protoc_insertion_point(message_clear_start:energy_rec.FieldLayout.HeliostatType.Vertex)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FieldLayout_HeliostatType_Vertex, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FieldLayout_HeliostatType_Vertex*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FieldLayout_HeliostatType_Vertex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:energy_rec.FieldLayout.HeliostatType.Vertex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:energy_rec.FieldLayout.HeliostatType.Vertex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:energy_rec.FieldLayout.HeliostatType.Vertex)
  return false;
#undef DO_
}

void FieldLayout_HeliostatType_Vertex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:energy_rec.FieldLayout.HeliostatType.Vertex)
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:energy_rec.FieldLayout.HeliostatType.Vertex)
}

::google::protobuf::uint8* FieldLayout_HeliostatType_Vertex::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:energy_rec.FieldLayout.HeliostatType.Vertex)
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:energy_rec.FieldLayout.HeliostatType.Vertex)
  return target;
}

int FieldLayout_HeliostatType_Vertex::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:energy_rec.FieldLayout.HeliostatType.Vertex)
  int total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
int FieldLayout_HeliostatType_Vertex::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:energy_rec.FieldLayout.HeliostatType.Vertex)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldLayout_HeliostatType_Vertex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:energy_rec.FieldLayout.HeliostatType.Vertex)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FieldLayout_HeliostatType_Vertex* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldLayout_HeliostatType_Vertex>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:energy_rec.FieldLayout.HeliostatType.Vertex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:energy_rec.FieldLayout.HeliostatType.Vertex)
    MergeFrom(*source);
  }
}

void FieldLayout_HeliostatType_Vertex::MergeFrom(const FieldLayout_HeliostatType_Vertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:energy_rec.FieldLayout.HeliostatType.Vertex)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FieldLayout_HeliostatType_Vertex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:energy_rec.FieldLayout.HeliostatType.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldLayout_HeliostatType_Vertex::CopyFrom(const FieldLayout_HeliostatType_Vertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:energy_rec.FieldLayout.HeliostatType.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldLayout_HeliostatType_Vertex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FieldLayout_HeliostatType_Vertex::Swap(FieldLayout_HeliostatType_Vertex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldLayout_HeliostatType_Vertex::InternalSwap(FieldLayout_HeliostatType_Vertex* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldLayout_HeliostatType_Vertex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldLayout_HeliostatType_Vertex_descriptor_;
  metadata.reflection = FieldLayout_HeliostatType_Vertex_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldLayout_HeliostatType::kReflectivityFieldNumber;
const int FieldLayout_HeliostatType::kFocalLengthFieldNumber;
const int FieldLayout_HeliostatType::kActuationFieldNumber;
const int FieldLayout_HeliostatType::kWidthFieldNumber;
const int FieldLayout_HeliostatType::kHeightFieldNumber;
const int FieldLayout_HeliostatType::kVertexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldLayout_HeliostatType::FieldLayout_HeliostatType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:energy_rec.FieldLayout.HeliostatType)
}

void FieldLayout_HeliostatType::InitAsDefaultInstance() {
}

FieldLayout_HeliostatType::FieldLayout_HeliostatType(const FieldLayout_HeliostatType& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:energy_rec.FieldLayout.HeliostatType)
}

void FieldLayout_HeliostatType::SharedCtor() {
  _cached_size_ = 0;
  reflectivity_ = 1;
  focal_length_ = 0;
  actuation_ = 0;
  width_ = 3;
  height_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldLayout_HeliostatType::~FieldLayout_HeliostatType() {
  // @@protoc_insertion_point(destructor:energy_rec.FieldLayout.HeliostatType)
  SharedDtor();
}

void FieldLayout_HeliostatType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FieldLayout_HeliostatType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldLayout_HeliostatType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldLayout_HeliostatType_descriptor_;
}

const FieldLayout_HeliostatType& FieldLayout_HeliostatType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  return *default_instance_;
}

FieldLayout_HeliostatType* FieldLayout_HeliostatType::default_instance_ = NULL;

FieldLayout_HeliostatType* FieldLayout_HeliostatType::New(::google::protobuf::Arena* arena) const {
  FieldLayout_HeliostatType* n = new FieldLayout_HeliostatType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldLayout_HeliostatType::Clear() {
// @@protoc_insertion_point(message_clear_start:energy_rec.FieldLayout.HeliostatType)
  if (_has_bits_[0 / 32] & 31u) {
    reflectivity_ = 1;
    focal_length_ = 0;
    actuation_ = 0;
    width_ = 3;
    height_ = 2;
  }
  vertex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FieldLayout_HeliostatType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:energy_rec.FieldLayout.HeliostatType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double reflectivity = 1 [default = 1];
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reflectivity_)));
          set_has_reflectivity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_focal_length;
        break;
      }

      // optional double focal_length = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_focal_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &focal_length_)));
          set_has_focal_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_actuation;
        break;
      }

      // optional .energy_rec.FieldLayout.HeliostatType.Actuation actuation = 3 [default = DIRECT];
      case 3: {
        if (tag == 24) {
         parse_actuation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::energy_rec::FieldLayout_HeliostatType_Actuation_IsValid(value)) {
            set_actuation(static_cast< ::energy_rec::FieldLayout_HeliostatType_Actuation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_width;
        break;
      }

      // optional double width = 4 [default = 3];
      case 4: {
        if (tag == 33) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_height;
        break;
      }

      // optional double height = 5 [default = 2];
      case 5: {
        if (tag == 41) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_vertex;
        break;
      }

      // repeated .energy_rec.FieldLayout.HeliostatType.Vertex vertex = 6;
      case 6: {
        if (tag == 50) {
         parse_vertex:
          DO_(input->IncrementRecursionDepth());
         parse_loop_vertex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vertex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_vertex;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:energy_rec.FieldLayout.HeliostatType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:energy_rec.FieldLayout.HeliostatType)
  return false;
#undef DO_
}

void FieldLayout_HeliostatType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:energy_rec.FieldLayout.HeliostatType)
  // optional double reflectivity = 1 [default = 1];
  if (has_reflectivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->reflectivity(), output);
  }

  // optional double focal_length = 2 [default = 0];
  if (has_focal_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->focal_length(), output);
  }

  // optional .energy_rec.FieldLayout.HeliostatType.Actuation actuation = 3 [default = DIRECT];
  if (has_actuation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->actuation(), output);
  }

  // optional double width = 4 [default = 3];
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->width(), output);
  }

  // optional double height = 5 [default = 2];
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->height(), output);
  }

  // repeated .energy_rec.FieldLayout.HeliostatType.Vertex vertex = 6;
  for (unsigned int i = 0, n = this->vertex_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->vertex(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:energy_rec.FieldLayout.HeliostatType)
}

::google::protobuf::uint8* FieldLayout_HeliostatType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:energy_rec.FieldLayout.HeliostatType)
  // optional double reflectivity = 1 [default = 1];
  if (has_reflectivity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->reflectivity(), target);
  }

  // optional double focal_length = 2 [default = 0];
  if (has_focal_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->focal_length(), target);
  }

  // optional .energy_rec.FieldLayout.HeliostatType.Actuation actuation = 3 [default = DIRECT];
  if (has_actuation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->actuation(), target);
  }

  // optional double width = 4 [default = 3];
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->width(), target);
  }

  // optional double height = 5 [default = 2];
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->height(), target);
  }

  // repeated .energy_rec.FieldLayout.HeliostatType.Vertex vertex = 6;
  for (unsigned int i = 0, n = this->vertex_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->vertex(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:energy_rec.FieldLayout.HeliostatType)
  return target;
}

int FieldLayout_HeliostatType::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:energy_rec.FieldLayout.HeliostatType)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional double reflectivity = 1 [default = 1];
    if (has_reflectivity()) {
      total_size += 1 + 8;
    }

    // optional double focal_length = 2 [default = 0];
    if (has_focal_length()) {
      total_size += 1 + 8;
    }

    // optional .energy_rec.FieldLayout.HeliostatType.Actuation actuation = 3 [default = DIRECT];
    if (has_actuation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->actuation());
    }

    // optional double width = 4 [default = 3];
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double height = 5 [default = 2];
    if (has_height()) {
      total_size += 1 + 8;
    }

  }
  // repeated .energy_rec.FieldLayout.HeliostatType.Vertex vertex = 6;
  total_size += 1 * this->vertex_size();
  for (int i = 0; i < this->vertex_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertex(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldLayout_HeliostatType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:energy_rec.FieldLayout.HeliostatType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FieldLayout_HeliostatType* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldLayout_HeliostatType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:energy_rec.FieldLayout.HeliostatType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:energy_rec.FieldLayout.HeliostatType)
    MergeFrom(*source);
  }
}

void FieldLayout_HeliostatType::MergeFrom(const FieldLayout_HeliostatType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:energy_rec.FieldLayout.HeliostatType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  vertex_.MergeFrom(from.vertex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reflectivity()) {
      set_reflectivity(from.reflectivity());
    }
    if (from.has_focal_length()) {
      set_focal_length(from.focal_length());
    }
    if (from.has_actuation()) {
      set_actuation(from.actuation());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FieldLayout_HeliostatType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:energy_rec.FieldLayout.HeliostatType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldLayout_HeliostatType::CopyFrom(const FieldLayout_HeliostatType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:energy_rec.FieldLayout.HeliostatType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldLayout_HeliostatType::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->vertex())) return false;
  return true;
}

void FieldLayout_HeliostatType::Swap(FieldLayout_HeliostatType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldLayout_HeliostatType::InternalSwap(FieldLayout_HeliostatType* other) {
  std::swap(reflectivity_, other->reflectivity_);
  std::swap(focal_length_, other->focal_length_);
  std::swap(actuation_, other->actuation_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  vertex_.UnsafeArenaSwap(&other->vertex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldLayout_HeliostatType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldLayout_HeliostatType_descriptor_;
  metadata.reflection = FieldLayout_HeliostatType_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldLayout_HeliostatBlock::kHeliostatTypeFieldNumber;
const int FieldLayout_HeliostatBlock::kStartFieldNumber;
const int FieldLayout_HeliostatBlock::kXStepFieldNumber;
const int FieldLayout_HeliostatBlock::kNumXStepsFieldNumber;
const int FieldLayout_HeliostatBlock::kYStepFieldNumber;
const int FieldLayout_HeliostatBlock::kNumYStepsFieldNumber;
const int FieldLayout_HeliostatBlock::kAimFieldNumber;
const int FieldLayout_HeliostatBlock::kFrameOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldLayout_HeliostatBlock::FieldLayout_HeliostatBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:energy_rec.FieldLayout.HeliostatBlock)
}

void FieldLayout_HeliostatBlock::InitAsDefaultInstance() {
  heliostat_type_ = const_cast< ::energy_rec::FieldLayout_HeliostatType*>(&::energy_rec::FieldLayout_HeliostatType::default_instance());
  start_ = const_cast< ::energy_rec::FieldLayout_Vector*>(&::energy_rec::FieldLayout_Vector::default_instance());
  x_step_ = const_cast< ::energy_rec::FieldLayout_Vector*>(&::energy_rec::FieldLayout_Vector::default_instance());
  y_step_ = const_cast< ::energy_rec::FieldLayout_Vector*>(&::energy_rec::FieldLayout_Vector::default_instance());
  aim_ = const_cast< ::energy_rec::FieldLayout_Vector*>(&::energy_rec::FieldLayout_Vector::default_instance());
  frame_orientation_ = const_cast< ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ*>(&::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ::default_instance());
}

FieldLayout_HeliostatBlock::FieldLayout_HeliostatBlock(const FieldLayout_HeliostatBlock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:energy_rec.FieldLayout.HeliostatBlock)
}

void FieldLayout_HeliostatBlock::SharedCtor() {
  _cached_size_ = 0;
  heliostat_type_ = NULL;
  start_ = NULL;
  x_step_ = NULL;
  num_x_steps_ = 0;
  y_step_ = NULL;
  num_y_steps_ = 0;
  aim_ = NULL;
  frame_orientation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldLayout_HeliostatBlock::~FieldLayout_HeliostatBlock() {
  // @@protoc_insertion_point(destructor:energy_rec.FieldLayout.HeliostatBlock)
  SharedDtor();
}

void FieldLayout_HeliostatBlock::SharedDtor() {
  if (this != default_instance_) {
    delete heliostat_type_;
    delete start_;
    delete x_step_;
    delete y_step_;
    delete aim_;
    delete frame_orientation_;
  }
}

void FieldLayout_HeliostatBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldLayout_HeliostatBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldLayout_HeliostatBlock_descriptor_;
}

const FieldLayout_HeliostatBlock& FieldLayout_HeliostatBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  return *default_instance_;
}

FieldLayout_HeliostatBlock* FieldLayout_HeliostatBlock::default_instance_ = NULL;

FieldLayout_HeliostatBlock* FieldLayout_HeliostatBlock::New(::google::protobuf::Arena* arena) const {
  FieldLayout_HeliostatBlock* n = new FieldLayout_HeliostatBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldLayout_HeliostatBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:energy_rec.FieldLayout.HeliostatBlock)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FieldLayout_HeliostatBlock, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FieldLayout_HeliostatBlock*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(num_x_steps_, num_y_steps_);
    if (has_heliostat_type()) {
      if (heliostat_type_ != NULL) heliostat_type_->::energy_rec::FieldLayout_HeliostatType::Clear();
    }
    if (has_start()) {
      if (start_ != NULL) start_->::energy_rec::FieldLayout_Vector::Clear();
    }
    if (has_x_step()) {
      if (x_step_ != NULL) x_step_->::energy_rec::FieldLayout_Vector::Clear();
    }
    if (has_y_step()) {
      if (y_step_ != NULL) y_step_->::energy_rec::FieldLayout_Vector::Clear();
    }
    if (has_aim()) {
      if (aim_ != NULL) aim_->::energy_rec::FieldLayout_Vector::Clear();
    }
    if (has_frame_orientation()) {
      if (frame_orientation_ != NULL) frame_orientation_->::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FieldLayout_HeliostatBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:energy_rec.FieldLayout.HeliostatBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .energy_rec.FieldLayout.HeliostatType heliostat_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heliostat_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start;
        break;
      }

      // required .energy_rec.FieldLayout.Vector start = 2;
      case 2: {
        if (tag == 18) {
         parse_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_x_step;
        break;
      }

      // required .energy_rec.FieldLayout.Vector x_step = 3;
      case 3: {
        if (tag == 26) {
         parse_x_step:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_step()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_x_steps;
        break;
      }

      // required int32 num_x_steps = 4;
      case 4: {
        if (tag == 32) {
         parse_num_x_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_x_steps_)));
          set_has_num_x_steps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_y_step;
        break;
      }

      // required .energy_rec.FieldLayout.Vector y_step = 5;
      case 5: {
        if (tag == 42) {
         parse_y_step:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_y_step()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_num_y_steps;
        break;
      }

      // required int32 num_y_steps = 6;
      case 6: {
        if (tag == 48) {
         parse_num_y_steps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_y_steps_)));
          set_has_num_y_steps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_aim;
        break;
      }

      // required .energy_rec.FieldLayout.Vector aim = 7;
      case 7: {
        if (tag == 58) {
         parse_aim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aim()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_frame_orientation;
        break;
      }

      // optional .energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ frame_orientation = 8;
      case 8: {
        if (tag == 66) {
         parse_frame_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:energy_rec.FieldLayout.HeliostatBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:energy_rec.FieldLayout.HeliostatBlock)
  return false;
#undef DO_
}

void FieldLayout_HeliostatBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:energy_rec.FieldLayout.HeliostatBlock)
  // required .energy_rec.FieldLayout.HeliostatType heliostat_type = 1;
  if (has_heliostat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->heliostat_type_, output);
  }

  // required .energy_rec.FieldLayout.Vector start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->start_, output);
  }

  // required .energy_rec.FieldLayout.Vector x_step = 3;
  if (has_x_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->x_step_, output);
  }

  // required int32 num_x_steps = 4;
  if (has_num_x_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_x_steps(), output);
  }

  // required .energy_rec.FieldLayout.Vector y_step = 5;
  if (has_y_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->y_step_, output);
  }

  // required int32 num_y_steps = 6;
  if (has_num_y_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_y_steps(), output);
  }

  // required .energy_rec.FieldLayout.Vector aim = 7;
  if (has_aim()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->aim_, output);
  }

  // optional .energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ frame_orientation = 8;
  if (has_frame_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->frame_orientation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:energy_rec.FieldLayout.HeliostatBlock)
}

::google::protobuf::uint8* FieldLayout_HeliostatBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:energy_rec.FieldLayout.HeliostatBlock)
  // required .energy_rec.FieldLayout.HeliostatType heliostat_type = 1;
  if (has_heliostat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->heliostat_type_, false, target);
  }

  // required .energy_rec.FieldLayout.Vector start = 2;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->start_, false, target);
  }

  // required .energy_rec.FieldLayout.Vector x_step = 3;
  if (has_x_step()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->x_step_, false, target);
  }

  // required int32 num_x_steps = 4;
  if (has_num_x_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_x_steps(), target);
  }

  // required .energy_rec.FieldLayout.Vector y_step = 5;
  if (has_y_step()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->y_step_, false, target);
  }

  // required int32 num_y_steps = 6;
  if (has_num_y_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_y_steps(), target);
  }

  // required .energy_rec.FieldLayout.Vector aim = 7;
  if (has_aim()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->aim_, false, target);
  }

  // optional .energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ frame_orientation = 8;
  if (has_frame_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->frame_orientation_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:energy_rec.FieldLayout.HeliostatBlock)
  return target;
}

int FieldLayout_HeliostatBlock::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:energy_rec.FieldLayout.HeliostatBlock)
  int total_size = 0;

  if (has_heliostat_type()) {
    // required .energy_rec.FieldLayout.HeliostatType heliostat_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->heliostat_type_);
  }

  if (has_start()) {
    // required .energy_rec.FieldLayout.Vector start = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_);
  }

  if (has_x_step()) {
    // required .energy_rec.FieldLayout.Vector x_step = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->x_step_);
  }

  if (has_num_x_steps()) {
    // required int32 num_x_steps = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_x_steps());
  }

  if (has_y_step()) {
    // required .energy_rec.FieldLayout.Vector y_step = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->y_step_);
  }

  if (has_num_y_steps()) {
    // required int32 num_y_steps = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_y_steps());
  }

  if (has_aim()) {
    // required .energy_rec.FieldLayout.Vector aim = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->aim_);
  }

  return total_size;
}
int FieldLayout_HeliostatBlock::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:energy_rec.FieldLayout.HeliostatBlock)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .energy_rec.FieldLayout.HeliostatType heliostat_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->heliostat_type_);

    // required .energy_rec.FieldLayout.Vector start = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_);

    // required .energy_rec.FieldLayout.Vector x_step = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->x_step_);

    // required int32 num_x_steps = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_x_steps());

    // required .energy_rec.FieldLayout.Vector y_step = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->y_step_);

    // required int32 num_y_steps = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_y_steps());

    // required .energy_rec.FieldLayout.Vector aim = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->aim_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ frame_orientation = 8;
  if (has_frame_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->frame_orientation_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldLayout_HeliostatBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:energy_rec.FieldLayout.HeliostatBlock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FieldLayout_HeliostatBlock* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldLayout_HeliostatBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:energy_rec.FieldLayout.HeliostatBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:energy_rec.FieldLayout.HeliostatBlock)
    MergeFrom(*source);
  }
}

void FieldLayout_HeliostatBlock::MergeFrom(const FieldLayout_HeliostatBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:energy_rec.FieldLayout.HeliostatBlock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heliostat_type()) {
      mutable_heliostat_type()->::energy_rec::FieldLayout_HeliostatType::MergeFrom(from.heliostat_type());
    }
    if (from.has_start()) {
      mutable_start()->::energy_rec::FieldLayout_Vector::MergeFrom(from.start());
    }
    if (from.has_x_step()) {
      mutable_x_step()->::energy_rec::FieldLayout_Vector::MergeFrom(from.x_step());
    }
    if (from.has_num_x_steps()) {
      set_num_x_steps(from.num_x_steps());
    }
    if (from.has_y_step()) {
      mutable_y_step()->::energy_rec::FieldLayout_Vector::MergeFrom(from.y_step());
    }
    if (from.has_num_y_steps()) {
      set_num_y_steps(from.num_y_steps());
    }
    if (from.has_aim()) {
      mutable_aim()->::energy_rec::FieldLayout_Vector::MergeFrom(from.aim());
    }
    if (from.has_frame_orientation()) {
      mutable_frame_orientation()->::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ::MergeFrom(from.frame_orientation());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FieldLayout_HeliostatBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:energy_rec.FieldLayout.HeliostatBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldLayout_HeliostatBlock::CopyFrom(const FieldLayout_HeliostatBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:energy_rec.FieldLayout.HeliostatBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldLayout_HeliostatBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_heliostat_type()) {
    if (!this->heliostat_type_->IsInitialized()) return false;
  }
  if (has_start()) {
    if (!this->start_->IsInitialized()) return false;
  }
  if (has_x_step()) {
    if (!this->x_step_->IsInitialized()) return false;
  }
  if (has_y_step()) {
    if (!this->y_step_->IsInitialized()) return false;
  }
  if (has_aim()) {
    if (!this->aim_->IsInitialized()) return false;
  }
  if (has_frame_orientation()) {
    if (!this->frame_orientation_->IsInitialized()) return false;
  }
  return true;
}

void FieldLayout_HeliostatBlock::Swap(FieldLayout_HeliostatBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldLayout_HeliostatBlock::InternalSwap(FieldLayout_HeliostatBlock* other) {
  std::swap(heliostat_type_, other->heliostat_type_);
  std::swap(start_, other->start_);
  std::swap(x_step_, other->x_step_);
  std::swap(num_x_steps_, other->num_x_steps_);
  std::swap(y_step_, other->y_step_);
  std::swap(num_y_steps_, other->num_y_steps_);
  std::swap(aim_, other->aim_);
  std::swap(frame_orientation_, other->frame_orientation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldLayout_HeliostatBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldLayout_HeliostatBlock_descriptor_;
  metadata.reflection = FieldLayout_HeliostatBlock_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldLayout_Heliostat::kHeliostatTypeFieldNumber;
const int FieldLayout_Heliostat::kNameFieldNumber;
const int FieldLayout_Heliostat::kLocationFieldNumber;
const int FieldLayout_Heliostat::kAimFieldNumber;
const int FieldLayout_Heliostat::kFrameOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldLayout_Heliostat::FieldLayout_Heliostat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:energy_rec.FieldLayout.Heliostat)
}

void FieldLayout_Heliostat::InitAsDefaultInstance() {
  heliostat_type_ = const_cast< ::energy_rec::FieldLayout_HeliostatType*>(&::energy_rec::FieldLayout_HeliostatType::default_instance());
  location_ = const_cast< ::energy_rec::FieldLayout_Vector*>(&::energy_rec::FieldLayout_Vector::default_instance());
  aim_ = const_cast< ::energy_rec::FieldLayout_Vector*>(&::energy_rec::FieldLayout_Vector::default_instance());
  frame_orientation_ = const_cast< ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ*>(&::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ::default_instance());
}

FieldLayout_Heliostat::FieldLayout_Heliostat(const FieldLayout_Heliostat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:energy_rec.FieldLayout.Heliostat)
}

void FieldLayout_Heliostat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  heliostat_type_ = NULL;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_ = NULL;
  aim_ = NULL;
  frame_orientation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldLayout_Heliostat::~FieldLayout_Heliostat() {
  // @@protoc_insertion_point(destructor:energy_rec.FieldLayout.Heliostat)
  SharedDtor();
}

void FieldLayout_Heliostat::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete heliostat_type_;
    delete location_;
    delete aim_;
    delete frame_orientation_;
  }
}

void FieldLayout_Heliostat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldLayout_Heliostat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldLayout_Heliostat_descriptor_;
}

const FieldLayout_Heliostat& FieldLayout_Heliostat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  return *default_instance_;
}

FieldLayout_Heliostat* FieldLayout_Heliostat::default_instance_ = NULL;

FieldLayout_Heliostat* FieldLayout_Heliostat::New(::google::protobuf::Arena* arena) const {
  FieldLayout_Heliostat* n = new FieldLayout_Heliostat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldLayout_Heliostat::Clear() {
// @@protoc_insertion_point(message_clear_start:energy_rec.FieldLayout.Heliostat)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_heliostat_type()) {
      if (heliostat_type_ != NULL) heliostat_type_->::energy_rec::FieldLayout_HeliostatType::Clear();
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_location()) {
      if (location_ != NULL) location_->::energy_rec::FieldLayout_Vector::Clear();
    }
    if (has_aim()) {
      if (aim_ != NULL) aim_->::energy_rec::FieldLayout_Vector::Clear();
    }
    if (has_frame_orientation()) {
      if (frame_orientation_ != NULL) frame_orientation_->::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FieldLayout_Heliostat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:energy_rec.FieldLayout.Heliostat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .energy_rec.FieldLayout.HeliostatType heliostat_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heliostat_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "energy_rec.FieldLayout.Heliostat.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_location;
        break;
      }

      // required .energy_rec.FieldLayout.Vector location = 3;
      case 3: {
        if (tag == 26) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_aim;
        break;
      }

      // required .energy_rec.FieldLayout.Vector aim = 4;
      case 4: {
        if (tag == 34) {
         parse_aim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aim()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_frame_orientation;
        break;
      }

      // optional .energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ frame_orientation = 5;
      case 5: {
        if (tag == 42) {
         parse_frame_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:energy_rec.FieldLayout.Heliostat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:energy_rec.FieldLayout.Heliostat)
  return false;
#undef DO_
}

void FieldLayout_Heliostat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:energy_rec.FieldLayout.Heliostat)
  // required .energy_rec.FieldLayout.HeliostatType heliostat_type = 1;
  if (has_heliostat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->heliostat_type_, output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "energy_rec.FieldLayout.Heliostat.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required .energy_rec.FieldLayout.Vector location = 3;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // required .energy_rec.FieldLayout.Vector aim = 4;
  if (has_aim()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->aim_, output);
  }

  // optional .energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ frame_orientation = 5;
  if (has_frame_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->frame_orientation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:energy_rec.FieldLayout.Heliostat)
}

::google::protobuf::uint8* FieldLayout_Heliostat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:energy_rec.FieldLayout.Heliostat)
  // required .energy_rec.FieldLayout.HeliostatType heliostat_type = 1;
  if (has_heliostat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->heliostat_type_, false, target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "energy_rec.FieldLayout.Heliostat.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .energy_rec.FieldLayout.Vector location = 3;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, false, target);
  }

  // required .energy_rec.FieldLayout.Vector aim = 4;
  if (has_aim()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->aim_, false, target);
  }

  // optional .energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ frame_orientation = 5;
  if (has_frame_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->frame_orientation_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:energy_rec.FieldLayout.Heliostat)
  return target;
}

int FieldLayout_Heliostat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:energy_rec.FieldLayout.Heliostat)
  int total_size = 0;

  if (has_heliostat_type()) {
    // required .energy_rec.FieldLayout.HeliostatType heliostat_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->heliostat_type_);
  }

  if (has_location()) {
    // required .energy_rec.FieldLayout.Vector location = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  if (has_aim()) {
    // required .energy_rec.FieldLayout.Vector aim = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->aim_);
  }

  return total_size;
}
int FieldLayout_Heliostat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:energy_rec.FieldLayout.Heliostat)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required .energy_rec.FieldLayout.HeliostatType heliostat_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->heliostat_type_);

    // required .energy_rec.FieldLayout.Vector location = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);

    // required .energy_rec.FieldLayout.Vector aim = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->aim_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 18u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ frame_orientation = 5;
    if (has_frame_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->frame_orientation_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldLayout_Heliostat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:energy_rec.FieldLayout.Heliostat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FieldLayout_Heliostat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldLayout_Heliostat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:energy_rec.FieldLayout.Heliostat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:energy_rec.FieldLayout.Heliostat)
    MergeFrom(*source);
  }
}

void FieldLayout_Heliostat::MergeFrom(const FieldLayout_Heliostat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:energy_rec.FieldLayout.Heliostat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heliostat_type()) {
      mutable_heliostat_type()->::energy_rec::FieldLayout_HeliostatType::MergeFrom(from.heliostat_type());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_location()) {
      mutable_location()->::energy_rec::FieldLayout_Vector::MergeFrom(from.location());
    }
    if (from.has_aim()) {
      mutable_aim()->::energy_rec::FieldLayout_Vector::MergeFrom(from.aim());
    }
    if (from.has_frame_orientation()) {
      mutable_frame_orientation()->::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ::MergeFrom(from.frame_orientation());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FieldLayout_Heliostat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:energy_rec.FieldLayout.Heliostat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldLayout_Heliostat::CopyFrom(const FieldLayout_Heliostat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:energy_rec.FieldLayout.Heliostat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldLayout_Heliostat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (has_heliostat_type()) {
    if (!this->heliostat_type_->IsInitialized()) return false;
  }
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  if (has_aim()) {
    if (!this->aim_->IsInitialized()) return false;
  }
  if (has_frame_orientation()) {
    if (!this->frame_orientation_->IsInitialized()) return false;
  }
  return true;
}

void FieldLayout_Heliostat::Swap(FieldLayout_Heliostat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldLayout_Heliostat::InternalSwap(FieldLayout_Heliostat* other) {
  std::swap(heliostat_type_, other->heliostat_type_);
  name_.Swap(&other->name_);
  std::swap(location_, other->location_);
  std::swap(aim_, other->aim_);
  std::swap(frame_orientation_, other->frame_orientation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldLayout_Heliostat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldLayout_Heliostat_descriptor_;
  metadata.reflection = FieldLayout_Heliostat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldLayout_Aperture::kLocationFieldNumber;
const int FieldLayout_Aperture::kNormalFieldNumber;
const int FieldLayout_Aperture::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldLayout_Aperture::FieldLayout_Aperture()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:energy_rec.FieldLayout.Aperture)
}

void FieldLayout_Aperture::InitAsDefaultInstance() {
  location_ = const_cast< ::energy_rec::FieldLayout_Vector*>(&::energy_rec::FieldLayout_Vector::default_instance());
  normal_ = const_cast< ::energy_rec::FieldLayout_Vector*>(&::energy_rec::FieldLayout_Vector::default_instance());
}

FieldLayout_Aperture::FieldLayout_Aperture(const FieldLayout_Aperture& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:energy_rec.FieldLayout.Aperture)
}

void FieldLayout_Aperture::SharedCtor() {
  _cached_size_ = 0;
  location_ = NULL;
  normal_ = NULL;
  radius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldLayout_Aperture::~FieldLayout_Aperture() {
  // @@protoc_insertion_point(destructor:energy_rec.FieldLayout.Aperture)
  SharedDtor();
}

void FieldLayout_Aperture::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
    delete normal_;
  }
}

void FieldLayout_Aperture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldLayout_Aperture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldLayout_Aperture_descriptor_;
}

const FieldLayout_Aperture& FieldLayout_Aperture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  return *default_instance_;
}

FieldLayout_Aperture* FieldLayout_Aperture::default_instance_ = NULL;

FieldLayout_Aperture* FieldLayout_Aperture::New(::google::protobuf::Arena* arena) const {
  FieldLayout_Aperture* n = new FieldLayout_Aperture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldLayout_Aperture::Clear() {
// @@protoc_insertion_point(message_clear_start:energy_rec.FieldLayout.Aperture)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_location()) {
      if (location_ != NULL) location_->::energy_rec::FieldLayout_Vector::Clear();
    }
    if (has_normal()) {
      if (normal_ != NULL) normal_->::energy_rec::FieldLayout_Vector::Clear();
    }
    radius_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FieldLayout_Aperture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:energy_rec.FieldLayout.Aperture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .energy_rec.FieldLayout.Vector location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_normal;
        break;
      }

      // required .energy_rec.FieldLayout.Vector normal = 2;
      case 2: {
        if (tag == 18) {
         parse_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_radius;
        break;
      }

      // required double radius = 3;
      case 3: {
        if (tag == 25) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:energy_rec.FieldLayout.Aperture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:energy_rec.FieldLayout.Aperture)
  return false;
#undef DO_
}

void FieldLayout_Aperture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:energy_rec.FieldLayout.Aperture)
  // required .energy_rec.FieldLayout.Vector location = 1;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // required .energy_rec.FieldLayout.Vector normal = 2;
  if (has_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->normal_, output);
  }

  // required double radius = 3;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:energy_rec.FieldLayout.Aperture)
}

::google::protobuf::uint8* FieldLayout_Aperture::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:energy_rec.FieldLayout.Aperture)
  // required .energy_rec.FieldLayout.Vector location = 1;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->location_, false, target);
  }

  // required .energy_rec.FieldLayout.Vector normal = 2;
  if (has_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->normal_, false, target);
  }

  // required double radius = 3;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:energy_rec.FieldLayout.Aperture)
  return target;
}

int FieldLayout_Aperture::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:energy_rec.FieldLayout.Aperture)
  int total_size = 0;

  if (has_location()) {
    // required .energy_rec.FieldLayout.Vector location = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  if (has_normal()) {
    // required .energy_rec.FieldLayout.Vector normal = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->normal_);
  }

  if (has_radius()) {
    // required double radius = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
int FieldLayout_Aperture::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:energy_rec.FieldLayout.Aperture)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .energy_rec.FieldLayout.Vector location = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);

    // required .energy_rec.FieldLayout.Vector normal = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->normal_);

    // required double radius = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldLayout_Aperture::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:energy_rec.FieldLayout.Aperture)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FieldLayout_Aperture* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldLayout_Aperture>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:energy_rec.FieldLayout.Aperture)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:energy_rec.FieldLayout.Aperture)
    MergeFrom(*source);
  }
}

void FieldLayout_Aperture::MergeFrom(const FieldLayout_Aperture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:energy_rec.FieldLayout.Aperture)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      mutable_location()->::energy_rec::FieldLayout_Vector::MergeFrom(from.location());
    }
    if (from.has_normal()) {
      mutable_normal()->::energy_rec::FieldLayout_Vector::MergeFrom(from.normal());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FieldLayout_Aperture::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:energy_rec.FieldLayout.Aperture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldLayout_Aperture::CopyFrom(const FieldLayout_Aperture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:energy_rec.FieldLayout.Aperture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldLayout_Aperture::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  if (has_normal()) {
    if (!this->normal_->IsInitialized()) return false;
  }
  return true;
}

void FieldLayout_Aperture::Swap(FieldLayout_Aperture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldLayout_Aperture::InternalSwap(FieldLayout_Aperture* other) {
  std::swap(location_, other->location_);
  std::swap(normal_, other->normal_);
  std::swap(radius_, other->radius_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldLayout_Aperture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldLayout_Aperture_descriptor_;
  metadata.reflection = FieldLayout_Aperture_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldLayout_Receiver::kTypeFieldNumber;
const int FieldLayout_Receiver::kLocationFieldNumber;
const int FieldLayout_Receiver::kDirectionFieldNumber;
const int FieldLayout_Receiver::kResolutionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldLayout_Receiver::FieldLayout_Receiver()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:energy_rec.FieldLayout.Receiver)
}

void FieldLayout_Receiver::InitAsDefaultInstance() {
  location_ = const_cast< ::energy_rec::FieldLayout_Vector*>(&::energy_rec::FieldLayout_Vector::default_instance());
  direction_ = const_cast< ::energy_rec::FieldLayout_Vector*>(&::energy_rec::FieldLayout_Vector::default_instance());
}

FieldLayout_Receiver::FieldLayout_Receiver(const FieldLayout_Receiver& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:energy_rec.FieldLayout.Receiver)
}

void FieldLayout_Receiver::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_ = NULL;
  direction_ = NULL;
  resolution_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldLayout_Receiver::~FieldLayout_Receiver() {
  // @@protoc_insertion_point(destructor:energy_rec.FieldLayout.Receiver)
  SharedDtor();
}

void FieldLayout_Receiver::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete location_;
    delete direction_;
  }
}

void FieldLayout_Receiver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldLayout_Receiver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldLayout_Receiver_descriptor_;
}

const FieldLayout_Receiver& FieldLayout_Receiver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  return *default_instance_;
}

FieldLayout_Receiver* FieldLayout_Receiver::default_instance_ = NULL;

FieldLayout_Receiver* FieldLayout_Receiver::New(::google::protobuf::Arena* arena) const {
  FieldLayout_Receiver* n = new FieldLayout_Receiver;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldLayout_Receiver::Clear() {
// @@protoc_insertion_point(message_clear_start:energy_rec.FieldLayout.Receiver)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_location()) {
      if (location_ != NULL) location_->::energy_rec::FieldLayout_Vector::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::energy_rec::FieldLayout_Vector::Clear();
    }
    resolution_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FieldLayout_Receiver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:energy_rec.FieldLayout.Receiver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "energy_rec.FieldLayout.Receiver.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_location;
        break;
      }

      // required .energy_rec.FieldLayout.Vector location = 2;
      case 2: {
        if (tag == 18) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_direction;
        break;
      }

      // required .energy_rec.FieldLayout.Vector direction = 3;
      case 3: {
        if (tag == 26) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_resolution;
        break;
      }

      // required int32 resolution = 4;
      case 4: {
        if (tag == 32) {
         parse_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resolution_)));
          set_has_resolution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:energy_rec.FieldLayout.Receiver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:energy_rec.FieldLayout.Receiver)
  return false;
#undef DO_
}

void FieldLayout_Receiver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:energy_rec.FieldLayout.Receiver)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "energy_rec.FieldLayout.Receiver.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // required .energy_rec.FieldLayout.Vector location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  // required .energy_rec.FieldLayout.Vector direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->direction_, output);
  }

  // required int32 resolution = 4;
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->resolution(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:energy_rec.FieldLayout.Receiver)
}

::google::protobuf::uint8* FieldLayout_Receiver::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:energy_rec.FieldLayout.Receiver)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "energy_rec.FieldLayout.Receiver.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // required .energy_rec.FieldLayout.Vector location = 2;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->location_, false, target);
  }

  // required .energy_rec.FieldLayout.Vector direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->direction_, false, target);
  }

  // required int32 resolution = 4;
  if (has_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->resolution(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:energy_rec.FieldLayout.Receiver)
  return target;
}

int FieldLayout_Receiver::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:energy_rec.FieldLayout.Receiver)
  int total_size = 0;

  if (has_type()) {
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_location()) {
    // required .energy_rec.FieldLayout.Vector location = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  if (has_direction()) {
    // required .energy_rec.FieldLayout.Vector direction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->direction_);
  }

  if (has_resolution()) {
    // required int32 resolution = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resolution());
  }

  return total_size;
}
int FieldLayout_Receiver::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:energy_rec.FieldLayout.Receiver)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required .energy_rec.FieldLayout.Vector location = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);

    // required .energy_rec.FieldLayout.Vector direction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->direction_);

    // required int32 resolution = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resolution());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldLayout_Receiver::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:energy_rec.FieldLayout.Receiver)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FieldLayout_Receiver* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldLayout_Receiver>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:energy_rec.FieldLayout.Receiver)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:energy_rec.FieldLayout.Receiver)
    MergeFrom(*source);
  }
}

void FieldLayout_Receiver::MergeFrom(const FieldLayout_Receiver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:energy_rec.FieldLayout.Receiver)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_location()) {
      mutable_location()->::energy_rec::FieldLayout_Vector::MergeFrom(from.location());
    }
    if (from.has_direction()) {
      mutable_direction()->::energy_rec::FieldLayout_Vector::MergeFrom(from.direction());
    }
    if (from.has_resolution()) {
      set_resolution(from.resolution());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FieldLayout_Receiver::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:energy_rec.FieldLayout.Receiver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldLayout_Receiver::CopyFrom(const FieldLayout_Receiver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:energy_rec.FieldLayout.Receiver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldLayout_Receiver::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  if (has_direction()) {
    if (!this->direction_->IsInitialized()) return false;
  }
  return true;
}

void FieldLayout_Receiver::Swap(FieldLayout_Receiver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldLayout_Receiver::InternalSwap(FieldLayout_Receiver* other) {
  type_.Swap(&other->type_);
  std::swap(location_, other->location_);
  std::swap(direction_, other->direction_);
  std::swap(resolution_, other->resolution_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldLayout_Receiver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldLayout_Receiver_descriptor_;
  metadata.reflection = FieldLayout_Receiver_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FieldLayout::kSunFieldNumber;
const int FieldLayout::kHeliostatBlockFieldNumber;
const int FieldLayout::kHeliostatFieldNumber;
const int FieldLayout::kApertureFieldNumber;
const int FieldLayout::kReceiverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FieldLayout::FieldLayout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:energy_rec.FieldLayout)
}

void FieldLayout::InitAsDefaultInstance() {
  sun_ = const_cast< ::energy_rec::FieldLayout_Sun*>(&::energy_rec::FieldLayout_Sun::default_instance());
  aperture_ = const_cast< ::energy_rec::FieldLayout_Aperture*>(&::energy_rec::FieldLayout_Aperture::default_instance());
  receiver_ = const_cast< ::energy_rec::FieldLayout_Receiver*>(&::energy_rec::FieldLayout_Receiver::default_instance());
}

FieldLayout::FieldLayout(const FieldLayout& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:energy_rec.FieldLayout)
}

void FieldLayout::SharedCtor() {
  _cached_size_ = 0;
  sun_ = NULL;
  aperture_ = NULL;
  receiver_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldLayout::~FieldLayout() {
  // @@protoc_insertion_point(destructor:energy_rec.FieldLayout)
  SharedDtor();
}

void FieldLayout::SharedDtor() {
  if (this != default_instance_) {
    delete sun_;
    delete aperture_;
    delete receiver_;
  }
}

void FieldLayout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldLayout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldLayout_descriptor_;
}

const FieldLayout& FieldLayout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2ffield_5flayout_2eproto();
  return *default_instance_;
}

FieldLayout* FieldLayout::default_instance_ = NULL;

FieldLayout* FieldLayout::New(::google::protobuf::Arena* arena) const {
  FieldLayout* n = new FieldLayout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FieldLayout::Clear() {
// @@protoc_insertion_point(message_clear_start:energy_rec.FieldLayout)
  if (_has_bits_[0 / 32] & 25u) {
    if (has_sun()) {
      if (sun_ != NULL) sun_->::energy_rec::FieldLayout_Sun::Clear();
    }
    if (has_aperture()) {
      if (aperture_ != NULL) aperture_->::energy_rec::FieldLayout_Aperture::Clear();
    }
    if (has_receiver()) {
      if (receiver_ != NULL) receiver_->::energy_rec::FieldLayout_Receiver::Clear();
    }
  }
  heliostat_block_.Clear();
  heliostat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FieldLayout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:energy_rec.FieldLayout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .energy_rec.FieldLayout.Sun sun = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sun()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_heliostat_block;
        break;
      }

      // repeated .energy_rec.FieldLayout.HeliostatBlock heliostat_block = 2;
      case 2: {
        if (tag == 18) {
         parse_heliostat_block:
          DO_(input->IncrementRecursionDepth());
         parse_loop_heliostat_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_heliostat_block()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_heliostat_block;
        if (input->ExpectTag(26)) goto parse_loop_heliostat;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .energy_rec.FieldLayout.Heliostat heliostat = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_heliostat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_heliostat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_heliostat;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_aperture;
        break;
      }

      // optional .energy_rec.FieldLayout.Aperture aperture = 4;
      case 4: {
        if (tag == 34) {
         parse_aperture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aperture()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_receiver;
        break;
      }

      // required .energy_rec.FieldLayout.Receiver receiver = 5;
      case 5: {
        if (tag == 42) {
         parse_receiver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:energy_rec.FieldLayout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:energy_rec.FieldLayout)
  return false;
#undef DO_
}

void FieldLayout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:energy_rec.FieldLayout)
  // required .energy_rec.FieldLayout.Sun sun = 1;
  if (has_sun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sun_, output);
  }

  // repeated .energy_rec.FieldLayout.HeliostatBlock heliostat_block = 2;
  for (unsigned int i = 0, n = this->heliostat_block_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->heliostat_block(i), output);
  }

  // repeated .energy_rec.FieldLayout.Heliostat heliostat = 3;
  for (unsigned int i = 0, n = this->heliostat_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->heliostat(i), output);
  }

  // optional .energy_rec.FieldLayout.Aperture aperture = 4;
  if (has_aperture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->aperture_, output);
  }

  // required .energy_rec.FieldLayout.Receiver receiver = 5;
  if (has_receiver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->receiver_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:energy_rec.FieldLayout)
}

::google::protobuf::uint8* FieldLayout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:energy_rec.FieldLayout)
  // required .energy_rec.FieldLayout.Sun sun = 1;
  if (has_sun()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->sun_, false, target);
  }

  // repeated .energy_rec.FieldLayout.HeliostatBlock heliostat_block = 2;
  for (unsigned int i = 0, n = this->heliostat_block_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->heliostat_block(i), false, target);
  }

  // repeated .energy_rec.FieldLayout.Heliostat heliostat = 3;
  for (unsigned int i = 0, n = this->heliostat_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->heliostat(i), false, target);
  }

  // optional .energy_rec.FieldLayout.Aperture aperture = 4;
  if (has_aperture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->aperture_, false, target);
  }

  // required .energy_rec.FieldLayout.Receiver receiver = 5;
  if (has_receiver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->receiver_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:energy_rec.FieldLayout)
  return target;
}

int FieldLayout::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:energy_rec.FieldLayout)
  int total_size = 0;

  if (has_sun()) {
    // required .energy_rec.FieldLayout.Sun sun = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sun_);
  }

  if (has_receiver()) {
    // required .energy_rec.FieldLayout.Receiver receiver = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->receiver_);
  }

  return total_size;
}
int FieldLayout::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:energy_rec.FieldLayout)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000011) ^ 0x00000011) == 0) {  // All required fields are present.
    // required .energy_rec.FieldLayout.Sun sun = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sun_);

    // required .energy_rec.FieldLayout.Receiver receiver = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->receiver_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .energy_rec.FieldLayout.Aperture aperture = 4;
  if (has_aperture()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->aperture_);
  }

  // repeated .energy_rec.FieldLayout.HeliostatBlock heliostat_block = 2;
  total_size += 1 * this->heliostat_block_size();
  for (int i = 0; i < this->heliostat_block_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heliostat_block(i));
  }

  // repeated .energy_rec.FieldLayout.Heliostat heliostat = 3;
  total_size += 1 * this->heliostat_size();
  for (int i = 0; i < this->heliostat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heliostat(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldLayout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:energy_rec.FieldLayout)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FieldLayout* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FieldLayout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:energy_rec.FieldLayout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:energy_rec.FieldLayout)
    MergeFrom(*source);
  }
}

void FieldLayout::MergeFrom(const FieldLayout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:energy_rec.FieldLayout)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  heliostat_block_.MergeFrom(from.heliostat_block_);
  heliostat_.MergeFrom(from.heliostat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sun()) {
      mutable_sun()->::energy_rec::FieldLayout_Sun::MergeFrom(from.sun());
    }
    if (from.has_aperture()) {
      mutable_aperture()->::energy_rec::FieldLayout_Aperture::MergeFrom(from.aperture());
    }
    if (from.has_receiver()) {
      mutable_receiver()->::energy_rec::FieldLayout_Receiver::MergeFrom(from.receiver());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FieldLayout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:energy_rec.FieldLayout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldLayout::CopyFrom(const FieldLayout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:energy_rec.FieldLayout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldLayout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;

  if (has_sun()) {
    if (!this->sun_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->heliostat_block())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->heliostat())) return false;
  if (has_aperture()) {
    if (!this->aperture_->IsInitialized()) return false;
  }
  if (has_receiver()) {
    if (!this->receiver_->IsInitialized()) return false;
  }
  return true;
}

void FieldLayout::Swap(FieldLayout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FieldLayout::InternalSwap(FieldLayout* other) {
  std::swap(sun_, other->sun_);
  heliostat_block_.UnsafeArenaSwap(&other->heliostat_block_);
  heliostat_.UnsafeArenaSwap(&other->heliostat_);
  std::swap(aperture_, other->aperture_);
  std::swap(receiver_, other->receiver_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FieldLayout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldLayout_descriptor_;
  metadata.reflection = FieldLayout_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FieldLayout_Vector

// required .energy_rec.FieldLayout.Vector.CoordinateSystem coordinate_system = 1;
bool FieldLayout_Vector::has_coordinate_system() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FieldLayout_Vector::set_has_coordinate_system() {
  _has_bits_[0] |= 0x00000001u;
}
void FieldLayout_Vector::clear_has_coordinate_system() {
  _has_bits_[0] &= ~0x00000001u;
}
void FieldLayout_Vector::clear_coordinate_system() {
  coordinate_system_ = 0;
  clear_has_coordinate_system();
}
 ::energy_rec::FieldLayout_Vector_CoordinateSystem FieldLayout_Vector::coordinate_system() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Vector.coordinate_system)
  return static_cast< ::energy_rec::FieldLayout_Vector_CoordinateSystem >(coordinate_system_);
}
 void FieldLayout_Vector::set_coordinate_system(::energy_rec::FieldLayout_Vector_CoordinateSystem value) {
  assert(::energy_rec::FieldLayout_Vector_CoordinateSystem_IsValid(value));
  set_has_coordinate_system();
  coordinate_system_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.Vector.coordinate_system)
}

// repeated double coordinate = 2;
int FieldLayout_Vector::coordinate_size() const {
  return coordinate_.size();
}
void FieldLayout_Vector::clear_coordinate() {
  coordinate_.Clear();
}
 double FieldLayout_Vector::coordinate(int index) const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Vector.coordinate)
  return coordinate_.Get(index);
}
 void FieldLayout_Vector::set_coordinate(int index, double value) {
  coordinate_.Set(index, value);
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.Vector.coordinate)
}
 void FieldLayout_Vector::add_coordinate(double value) {
  coordinate_.Add(value);
  // @@protoc_insertion_point(field_add:energy_rec.FieldLayout.Vector.coordinate)
}
 const ::google::protobuf::RepeatedField< double >&
FieldLayout_Vector::coordinate() const {
  // @@protoc_insertion_point(field_list:energy_rec.FieldLayout.Vector.coordinate)
  return coordinate_;
}
 ::google::protobuf::RepeatedField< double >*
FieldLayout_Vector::mutable_coordinate() {
  // @@protoc_insertion_point(field_mutable_list:energy_rec.FieldLayout.Vector.coordinate)
  return &coordinate_;
}

// -------------------------------------------------------------------

// FieldLayout_EulerAnglesIntrinsicZXZ

// required double alpha = 1 [default = 0];
bool FieldLayout_EulerAnglesIntrinsicZXZ::has_alpha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FieldLayout_EulerAnglesIntrinsicZXZ::set_has_alpha() {
  _has_bits_[0] |= 0x00000001u;
}
void FieldLayout_EulerAnglesIntrinsicZXZ::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000001u;
}
void FieldLayout_EulerAnglesIntrinsicZXZ::clear_alpha() {
  alpha_ = 0;
  clear_has_alpha();
}
 double FieldLayout_EulerAnglesIntrinsicZXZ::alpha() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ.alpha)
  return alpha_;
}
 void FieldLayout_EulerAnglesIntrinsicZXZ::set_alpha(double value) {
  set_has_alpha();
  alpha_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ.alpha)
}

// required double beta = 2 [default = 0];
bool FieldLayout_EulerAnglesIntrinsicZXZ::has_beta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FieldLayout_EulerAnglesIntrinsicZXZ::set_has_beta() {
  _has_bits_[0] |= 0x00000002u;
}
void FieldLayout_EulerAnglesIntrinsicZXZ::clear_has_beta() {
  _has_bits_[0] &= ~0x00000002u;
}
void FieldLayout_EulerAnglesIntrinsicZXZ::clear_beta() {
  beta_ = 0;
  clear_has_beta();
}
 double FieldLayout_EulerAnglesIntrinsicZXZ::beta() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ.beta)
  return beta_;
}
 void FieldLayout_EulerAnglesIntrinsicZXZ::set_beta(double value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ.beta)
}

// required double gamma = 3 [default = 0];
bool FieldLayout_EulerAnglesIntrinsicZXZ::has_gamma() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FieldLayout_EulerAnglesIntrinsicZXZ::set_has_gamma() {
  _has_bits_[0] |= 0x00000004u;
}
void FieldLayout_EulerAnglesIntrinsicZXZ::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000004u;
}
void FieldLayout_EulerAnglesIntrinsicZXZ::clear_gamma() {
  gamma_ = 0;
  clear_has_gamma();
}
 double FieldLayout_EulerAnglesIntrinsicZXZ::gamma() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ.gamma)
  return gamma_;
}
 void FieldLayout_EulerAnglesIntrinsicZXZ::set_gamma(double value) {
  set_has_gamma();
  gamma_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ.gamma)
}

// -------------------------------------------------------------------

// FieldLayout_ManualSunConfig

// required .energy_rec.FieldLayout.Vector sun_vector = 1;
bool FieldLayout_ManualSunConfig::has_sun_vector() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FieldLayout_ManualSunConfig::set_has_sun_vector() {
  _has_bits_[0] |= 0x00000001u;
}
void FieldLayout_ManualSunConfig::clear_has_sun_vector() {
  _has_bits_[0] &= ~0x00000001u;
}
void FieldLayout_ManualSunConfig::clear_sun_vector() {
  if (sun_vector_ != NULL) sun_vector_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_sun_vector();
}
const ::energy_rec::FieldLayout_Vector& FieldLayout_ManualSunConfig::sun_vector() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.ManualSunConfig.sun_vector)
  return sun_vector_ != NULL ? *sun_vector_ : *default_instance_->sun_vector_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_ManualSunConfig::mutable_sun_vector() {
  set_has_sun_vector();
  if (sun_vector_ == NULL) {
    sun_vector_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.ManualSunConfig.sun_vector)
  return sun_vector_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_ManualSunConfig::release_sun_vector() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.ManualSunConfig.sun_vector)
  clear_has_sun_vector();
  ::energy_rec::FieldLayout_Vector* temp = sun_vector_;
  sun_vector_ = NULL;
  return temp;
}
void FieldLayout_ManualSunConfig::set_allocated_sun_vector(::energy_rec::FieldLayout_Vector* sun_vector) {
  delete sun_vector_;
  sun_vector_ = sun_vector;
  if (sun_vector) {
    set_has_sun_vector();
  } else {
    clear_has_sun_vector();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.ManualSunConfig.sun_vector)
}

// required double dni = 2;
bool FieldLayout_ManualSunConfig::has_dni() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FieldLayout_ManualSunConfig::set_has_dni() {
  _has_bits_[0] |= 0x00000002u;
}
void FieldLayout_ManualSunConfig::clear_has_dni() {
  _has_bits_[0] &= ~0x00000002u;
}
void FieldLayout_ManualSunConfig::clear_dni() {
  dni_ = 0;
  clear_has_dni();
}
 double FieldLayout_ManualSunConfig::dni() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.ManualSunConfig.dni)
  return dni_;
}
 void FieldLayout_ManualSunConfig::set_dni(double value) {
  set_has_dni();
  dni_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.ManualSunConfig.dni)
}

// -------------------------------------------------------------------

// FieldLayout_Sun

// required bool automatic = 1;
bool FieldLayout_Sun::has_automatic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FieldLayout_Sun::set_has_automatic() {
  _has_bits_[0] |= 0x00000001u;
}
void FieldLayout_Sun::clear_has_automatic() {
  _has_bits_[0] &= ~0x00000001u;
}
void FieldLayout_Sun::clear_automatic() {
  automatic_ = false;
  clear_has_automatic();
}
 bool FieldLayout_Sun::automatic() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Sun.automatic)
  return automatic_;
}
 void FieldLayout_Sun::set_automatic(bool value) {
  set_has_automatic();
  automatic_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.Sun.automatic)
}

// optional .energy_rec.FieldLayout.Vector field_location = 2;
bool FieldLayout_Sun::has_field_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FieldLayout_Sun::set_has_field_location() {
  _has_bits_[0] |= 0x00000002u;
}
void FieldLayout_Sun::clear_has_field_location() {
  _has_bits_[0] &= ~0x00000002u;
}
void FieldLayout_Sun::clear_field_location() {
  if (field_location_ != NULL) field_location_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_field_location();
}
const ::energy_rec::FieldLayout_Vector& FieldLayout_Sun::field_location() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Sun.field_location)
  return field_location_ != NULL ? *field_location_ : *default_instance_->field_location_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_Sun::mutable_field_location() {
  set_has_field_location();
  if (field_location_ == NULL) {
    field_location_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Sun.field_location)
  return field_location_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_Sun::release_field_location() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Sun.field_location)
  clear_has_field_location();
  ::energy_rec::FieldLayout_Vector* temp = field_location_;
  field_location_ = NULL;
  return temp;
}
void FieldLayout_Sun::set_allocated_field_location(::energy_rec::FieldLayout_Vector* field_location) {
  delete field_location_;
  field_location_ = field_location;
  if (field_location) {
    set_has_field_location();
  } else {
    clear_has_field_location();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Sun.field_location)
}

// repeated .energy_rec.FieldLayout.ManualSunConfig sun_config = 3;
int FieldLayout_Sun::sun_config_size() const {
  return sun_config_.size();
}
void FieldLayout_Sun::clear_sun_config() {
  sun_config_.Clear();
}
const ::energy_rec::FieldLayout_ManualSunConfig& FieldLayout_Sun::sun_config(int index) const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Sun.sun_config)
  return sun_config_.Get(index);
}
::energy_rec::FieldLayout_ManualSunConfig* FieldLayout_Sun::mutable_sun_config(int index) {
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Sun.sun_config)
  return sun_config_.Mutable(index);
}
::energy_rec::FieldLayout_ManualSunConfig* FieldLayout_Sun::add_sun_config() {
  // @@protoc_insertion_point(field_add:energy_rec.FieldLayout.Sun.sun_config)
  return sun_config_.Add();
}
::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_ManualSunConfig >*
FieldLayout_Sun::mutable_sun_config() {
  // @@protoc_insertion_point(field_mutable_list:energy_rec.FieldLayout.Sun.sun_config)
  return &sun_config_;
}
const ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_ManualSunConfig >&
FieldLayout_Sun::sun_config() const {
  // @@protoc_insertion_point(field_list:energy_rec.FieldLayout.Sun.sun_config)
  return sun_config_;
}

// -------------------------------------------------------------------

// FieldLayout_HeliostatType_Vertex

// required double x = 1;
bool FieldLayout_HeliostatType_Vertex::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FieldLayout_HeliostatType_Vertex::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void FieldLayout_HeliostatType_Vertex::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void FieldLayout_HeliostatType_Vertex::clear_x() {
  x_ = 0;
  clear_has_x();
}
 double FieldLayout_HeliostatType_Vertex::x() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatType.Vertex.x)
  return x_;
}
 void FieldLayout_HeliostatType_Vertex::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.HeliostatType.Vertex.x)
}

// required double y = 2;
bool FieldLayout_HeliostatType_Vertex::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FieldLayout_HeliostatType_Vertex::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void FieldLayout_HeliostatType_Vertex::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void FieldLayout_HeliostatType_Vertex::clear_y() {
  y_ = 0;
  clear_has_y();
}
 double FieldLayout_HeliostatType_Vertex::y() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatType.Vertex.y)
  return y_;
}
 void FieldLayout_HeliostatType_Vertex::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.HeliostatType.Vertex.y)
}

// -------------------------------------------------------------------

// FieldLayout_HeliostatType

// optional double reflectivity = 1 [default = 1];
bool FieldLayout_HeliostatType::has_reflectivity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FieldLayout_HeliostatType::set_has_reflectivity() {
  _has_bits_[0] |= 0x00000001u;
}
void FieldLayout_HeliostatType::clear_has_reflectivity() {
  _has_bits_[0] &= ~0x00000001u;
}
void FieldLayout_HeliostatType::clear_reflectivity() {
  reflectivity_ = 1;
  clear_has_reflectivity();
}
 double FieldLayout_HeliostatType::reflectivity() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatType.reflectivity)
  return reflectivity_;
}
 void FieldLayout_HeliostatType::set_reflectivity(double value) {
  set_has_reflectivity();
  reflectivity_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.HeliostatType.reflectivity)
}

// optional double focal_length = 2 [default = 0];
bool FieldLayout_HeliostatType::has_focal_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FieldLayout_HeliostatType::set_has_focal_length() {
  _has_bits_[0] |= 0x00000002u;
}
void FieldLayout_HeliostatType::clear_has_focal_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void FieldLayout_HeliostatType::clear_focal_length() {
  focal_length_ = 0;
  clear_has_focal_length();
}
 double FieldLayout_HeliostatType::focal_length() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatType.focal_length)
  return focal_length_;
}
 void FieldLayout_HeliostatType::set_focal_length(double value) {
  set_has_focal_length();
  focal_length_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.HeliostatType.focal_length)
}

// optional .energy_rec.FieldLayout.HeliostatType.Actuation actuation = 3 [default = DIRECT];
bool FieldLayout_HeliostatType::has_actuation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FieldLayout_HeliostatType::set_has_actuation() {
  _has_bits_[0] |= 0x00000004u;
}
void FieldLayout_HeliostatType::clear_has_actuation() {
  _has_bits_[0] &= ~0x00000004u;
}
void FieldLayout_HeliostatType::clear_actuation() {
  actuation_ = 0;
  clear_has_actuation();
}
 ::energy_rec::FieldLayout_HeliostatType_Actuation FieldLayout_HeliostatType::actuation() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatType.actuation)
  return static_cast< ::energy_rec::FieldLayout_HeliostatType_Actuation >(actuation_);
}
 void FieldLayout_HeliostatType::set_actuation(::energy_rec::FieldLayout_HeliostatType_Actuation value) {
  assert(::energy_rec::FieldLayout_HeliostatType_Actuation_IsValid(value));
  set_has_actuation();
  actuation_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.HeliostatType.actuation)
}

// optional double width = 4 [default = 3];
bool FieldLayout_HeliostatType::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FieldLayout_HeliostatType::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
void FieldLayout_HeliostatType::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void FieldLayout_HeliostatType::clear_width() {
  width_ = 3;
  clear_has_width();
}
 double FieldLayout_HeliostatType::width() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatType.width)
  return width_;
}
 void FieldLayout_HeliostatType::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.HeliostatType.width)
}

// optional double height = 5 [default = 2];
bool FieldLayout_HeliostatType::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FieldLayout_HeliostatType::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
void FieldLayout_HeliostatType::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void FieldLayout_HeliostatType::clear_height() {
  height_ = 2;
  clear_has_height();
}
 double FieldLayout_HeliostatType::height() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatType.height)
  return height_;
}
 void FieldLayout_HeliostatType::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.HeliostatType.height)
}

// repeated .energy_rec.FieldLayout.HeliostatType.Vertex vertex = 6;
int FieldLayout_HeliostatType::vertex_size() const {
  return vertex_.size();
}
void FieldLayout_HeliostatType::clear_vertex() {
  vertex_.Clear();
}
const ::energy_rec::FieldLayout_HeliostatType_Vertex& FieldLayout_HeliostatType::vertex(int index) const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatType.vertex)
  return vertex_.Get(index);
}
::energy_rec::FieldLayout_HeliostatType_Vertex* FieldLayout_HeliostatType::mutable_vertex(int index) {
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.HeliostatType.vertex)
  return vertex_.Mutable(index);
}
::energy_rec::FieldLayout_HeliostatType_Vertex* FieldLayout_HeliostatType::add_vertex() {
  // @@protoc_insertion_point(field_add:energy_rec.FieldLayout.HeliostatType.vertex)
  return vertex_.Add();
}
::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_HeliostatType_Vertex >*
FieldLayout_HeliostatType::mutable_vertex() {
  // @@protoc_insertion_point(field_mutable_list:energy_rec.FieldLayout.HeliostatType.vertex)
  return &vertex_;
}
const ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_HeliostatType_Vertex >&
FieldLayout_HeliostatType::vertex() const {
  // @@protoc_insertion_point(field_list:energy_rec.FieldLayout.HeliostatType.vertex)
  return vertex_;
}

// -------------------------------------------------------------------

// FieldLayout_HeliostatBlock

// required .energy_rec.FieldLayout.HeliostatType heliostat_type = 1;
bool FieldLayout_HeliostatBlock::has_heliostat_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FieldLayout_HeliostatBlock::set_has_heliostat_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FieldLayout_HeliostatBlock::clear_has_heliostat_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FieldLayout_HeliostatBlock::clear_heliostat_type() {
  if (heliostat_type_ != NULL) heliostat_type_->::energy_rec::FieldLayout_HeliostatType::Clear();
  clear_has_heliostat_type();
}
const ::energy_rec::FieldLayout_HeliostatType& FieldLayout_HeliostatBlock::heliostat_type() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatBlock.heliostat_type)
  return heliostat_type_ != NULL ? *heliostat_type_ : *default_instance_->heliostat_type_;
}
::energy_rec::FieldLayout_HeliostatType* FieldLayout_HeliostatBlock::mutable_heliostat_type() {
  set_has_heliostat_type();
  if (heliostat_type_ == NULL) {
    heliostat_type_ = new ::energy_rec::FieldLayout_HeliostatType;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.HeliostatBlock.heliostat_type)
  return heliostat_type_;
}
::energy_rec::FieldLayout_HeliostatType* FieldLayout_HeliostatBlock::release_heliostat_type() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.HeliostatBlock.heliostat_type)
  clear_has_heliostat_type();
  ::energy_rec::FieldLayout_HeliostatType* temp = heliostat_type_;
  heliostat_type_ = NULL;
  return temp;
}
void FieldLayout_HeliostatBlock::set_allocated_heliostat_type(::energy_rec::FieldLayout_HeliostatType* heliostat_type) {
  delete heliostat_type_;
  heliostat_type_ = heliostat_type;
  if (heliostat_type) {
    set_has_heliostat_type();
  } else {
    clear_has_heliostat_type();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.HeliostatBlock.heliostat_type)
}

// required .energy_rec.FieldLayout.Vector start = 2;
bool FieldLayout_HeliostatBlock::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FieldLayout_HeliostatBlock::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
void FieldLayout_HeliostatBlock::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
void FieldLayout_HeliostatBlock::clear_start() {
  if (start_ != NULL) start_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_start();
}
const ::energy_rec::FieldLayout_Vector& FieldLayout_HeliostatBlock::start() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatBlock.start)
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_HeliostatBlock::mutable_start() {
  set_has_start();
  if (start_ == NULL) {
    start_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.HeliostatBlock.start)
  return start_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_HeliostatBlock::release_start() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.HeliostatBlock.start)
  clear_has_start();
  ::energy_rec::FieldLayout_Vector* temp = start_;
  start_ = NULL;
  return temp;
}
void FieldLayout_HeliostatBlock::set_allocated_start(::energy_rec::FieldLayout_Vector* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.HeliostatBlock.start)
}

// required .energy_rec.FieldLayout.Vector x_step = 3;
bool FieldLayout_HeliostatBlock::has_x_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FieldLayout_HeliostatBlock::set_has_x_step() {
  _has_bits_[0] |= 0x00000004u;
}
void FieldLayout_HeliostatBlock::clear_has_x_step() {
  _has_bits_[0] &= ~0x00000004u;
}
void FieldLayout_HeliostatBlock::clear_x_step() {
  if (x_step_ != NULL) x_step_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_x_step();
}
const ::energy_rec::FieldLayout_Vector& FieldLayout_HeliostatBlock::x_step() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatBlock.x_step)
  return x_step_ != NULL ? *x_step_ : *default_instance_->x_step_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_HeliostatBlock::mutable_x_step() {
  set_has_x_step();
  if (x_step_ == NULL) {
    x_step_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.HeliostatBlock.x_step)
  return x_step_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_HeliostatBlock::release_x_step() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.HeliostatBlock.x_step)
  clear_has_x_step();
  ::energy_rec::FieldLayout_Vector* temp = x_step_;
  x_step_ = NULL;
  return temp;
}
void FieldLayout_HeliostatBlock::set_allocated_x_step(::energy_rec::FieldLayout_Vector* x_step) {
  delete x_step_;
  x_step_ = x_step;
  if (x_step) {
    set_has_x_step();
  } else {
    clear_has_x_step();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.HeliostatBlock.x_step)
}

// required int32 num_x_steps = 4;
bool FieldLayout_HeliostatBlock::has_num_x_steps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FieldLayout_HeliostatBlock::set_has_num_x_steps() {
  _has_bits_[0] |= 0x00000008u;
}
void FieldLayout_HeliostatBlock::clear_has_num_x_steps() {
  _has_bits_[0] &= ~0x00000008u;
}
void FieldLayout_HeliostatBlock::clear_num_x_steps() {
  num_x_steps_ = 0;
  clear_has_num_x_steps();
}
 ::google::protobuf::int32 FieldLayout_HeliostatBlock::num_x_steps() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatBlock.num_x_steps)
  return num_x_steps_;
}
 void FieldLayout_HeliostatBlock::set_num_x_steps(::google::protobuf::int32 value) {
  set_has_num_x_steps();
  num_x_steps_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.HeliostatBlock.num_x_steps)
}

// required .energy_rec.FieldLayout.Vector y_step = 5;
bool FieldLayout_HeliostatBlock::has_y_step() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FieldLayout_HeliostatBlock::set_has_y_step() {
  _has_bits_[0] |= 0x00000010u;
}
void FieldLayout_HeliostatBlock::clear_has_y_step() {
  _has_bits_[0] &= ~0x00000010u;
}
void FieldLayout_HeliostatBlock::clear_y_step() {
  if (y_step_ != NULL) y_step_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_y_step();
}
const ::energy_rec::FieldLayout_Vector& FieldLayout_HeliostatBlock::y_step() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatBlock.y_step)
  return y_step_ != NULL ? *y_step_ : *default_instance_->y_step_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_HeliostatBlock::mutable_y_step() {
  set_has_y_step();
  if (y_step_ == NULL) {
    y_step_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.HeliostatBlock.y_step)
  return y_step_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_HeliostatBlock::release_y_step() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.HeliostatBlock.y_step)
  clear_has_y_step();
  ::energy_rec::FieldLayout_Vector* temp = y_step_;
  y_step_ = NULL;
  return temp;
}
void FieldLayout_HeliostatBlock::set_allocated_y_step(::energy_rec::FieldLayout_Vector* y_step) {
  delete y_step_;
  y_step_ = y_step;
  if (y_step) {
    set_has_y_step();
  } else {
    clear_has_y_step();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.HeliostatBlock.y_step)
}

// required int32 num_y_steps = 6;
bool FieldLayout_HeliostatBlock::has_num_y_steps() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FieldLayout_HeliostatBlock::set_has_num_y_steps() {
  _has_bits_[0] |= 0x00000020u;
}
void FieldLayout_HeliostatBlock::clear_has_num_y_steps() {
  _has_bits_[0] &= ~0x00000020u;
}
void FieldLayout_HeliostatBlock::clear_num_y_steps() {
  num_y_steps_ = 0;
  clear_has_num_y_steps();
}
 ::google::protobuf::int32 FieldLayout_HeliostatBlock::num_y_steps() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatBlock.num_y_steps)
  return num_y_steps_;
}
 void FieldLayout_HeliostatBlock::set_num_y_steps(::google::protobuf::int32 value) {
  set_has_num_y_steps();
  num_y_steps_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.HeliostatBlock.num_y_steps)
}

// required .energy_rec.FieldLayout.Vector aim = 7;
bool FieldLayout_HeliostatBlock::has_aim() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FieldLayout_HeliostatBlock::set_has_aim() {
  _has_bits_[0] |= 0x00000040u;
}
void FieldLayout_HeliostatBlock::clear_has_aim() {
  _has_bits_[0] &= ~0x00000040u;
}
void FieldLayout_HeliostatBlock::clear_aim() {
  if (aim_ != NULL) aim_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_aim();
}
const ::energy_rec::FieldLayout_Vector& FieldLayout_HeliostatBlock::aim() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatBlock.aim)
  return aim_ != NULL ? *aim_ : *default_instance_->aim_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_HeliostatBlock::mutable_aim() {
  set_has_aim();
  if (aim_ == NULL) {
    aim_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.HeliostatBlock.aim)
  return aim_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_HeliostatBlock::release_aim() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.HeliostatBlock.aim)
  clear_has_aim();
  ::energy_rec::FieldLayout_Vector* temp = aim_;
  aim_ = NULL;
  return temp;
}
void FieldLayout_HeliostatBlock::set_allocated_aim(::energy_rec::FieldLayout_Vector* aim) {
  delete aim_;
  aim_ = aim;
  if (aim) {
    set_has_aim();
  } else {
    clear_has_aim();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.HeliostatBlock.aim)
}

// optional .energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ frame_orientation = 8;
bool FieldLayout_HeliostatBlock::has_frame_orientation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FieldLayout_HeliostatBlock::set_has_frame_orientation() {
  _has_bits_[0] |= 0x00000080u;
}
void FieldLayout_HeliostatBlock::clear_has_frame_orientation() {
  _has_bits_[0] &= ~0x00000080u;
}
void FieldLayout_HeliostatBlock::clear_frame_orientation() {
  if (frame_orientation_ != NULL) frame_orientation_->::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ::Clear();
  clear_has_frame_orientation();
}
const ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ& FieldLayout_HeliostatBlock::frame_orientation() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.HeliostatBlock.frame_orientation)
  return frame_orientation_ != NULL ? *frame_orientation_ : *default_instance_->frame_orientation_;
}
::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* FieldLayout_HeliostatBlock::mutable_frame_orientation() {
  set_has_frame_orientation();
  if (frame_orientation_ == NULL) {
    frame_orientation_ = new ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.HeliostatBlock.frame_orientation)
  return frame_orientation_;
}
::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* FieldLayout_HeliostatBlock::release_frame_orientation() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.HeliostatBlock.frame_orientation)
  clear_has_frame_orientation();
  ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* temp = frame_orientation_;
  frame_orientation_ = NULL;
  return temp;
}
void FieldLayout_HeliostatBlock::set_allocated_frame_orientation(::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* frame_orientation) {
  delete frame_orientation_;
  frame_orientation_ = frame_orientation;
  if (frame_orientation) {
    set_has_frame_orientation();
  } else {
    clear_has_frame_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.HeliostatBlock.frame_orientation)
}

// -------------------------------------------------------------------

// FieldLayout_Heliostat

// required .energy_rec.FieldLayout.HeliostatType heliostat_type = 1;
bool FieldLayout_Heliostat::has_heliostat_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FieldLayout_Heliostat::set_has_heliostat_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FieldLayout_Heliostat::clear_has_heliostat_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FieldLayout_Heliostat::clear_heliostat_type() {
  if (heliostat_type_ != NULL) heliostat_type_->::energy_rec::FieldLayout_HeliostatType::Clear();
  clear_has_heliostat_type();
}
const ::energy_rec::FieldLayout_HeliostatType& FieldLayout_Heliostat::heliostat_type() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Heliostat.heliostat_type)
  return heliostat_type_ != NULL ? *heliostat_type_ : *default_instance_->heliostat_type_;
}
::energy_rec::FieldLayout_HeliostatType* FieldLayout_Heliostat::mutable_heliostat_type() {
  set_has_heliostat_type();
  if (heliostat_type_ == NULL) {
    heliostat_type_ = new ::energy_rec::FieldLayout_HeliostatType;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Heliostat.heliostat_type)
  return heliostat_type_;
}
::energy_rec::FieldLayout_HeliostatType* FieldLayout_Heliostat::release_heliostat_type() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Heliostat.heliostat_type)
  clear_has_heliostat_type();
  ::energy_rec::FieldLayout_HeliostatType* temp = heliostat_type_;
  heliostat_type_ = NULL;
  return temp;
}
void FieldLayout_Heliostat::set_allocated_heliostat_type(::energy_rec::FieldLayout_HeliostatType* heliostat_type) {
  delete heliostat_type_;
  heliostat_type_ = heliostat_type;
  if (heliostat_type) {
    set_has_heliostat_type();
  } else {
    clear_has_heliostat_type();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Heliostat.heliostat_type)
}

// optional string name = 2;
bool FieldLayout_Heliostat::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FieldLayout_Heliostat::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void FieldLayout_Heliostat::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void FieldLayout_Heliostat::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& FieldLayout_Heliostat::name() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Heliostat.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FieldLayout_Heliostat::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.Heliostat.name)
}
 void FieldLayout_Heliostat::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:energy_rec.FieldLayout.Heliostat.name)
}
 void FieldLayout_Heliostat::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:energy_rec.FieldLayout.Heliostat.name)
}
 ::std::string* FieldLayout_Heliostat::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Heliostat.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FieldLayout_Heliostat::release_name() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Heliostat.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FieldLayout_Heliostat::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Heliostat.name)
}

// required .energy_rec.FieldLayout.Vector location = 3;
bool FieldLayout_Heliostat::has_location() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FieldLayout_Heliostat::set_has_location() {
  _has_bits_[0] |= 0x00000004u;
}
void FieldLayout_Heliostat::clear_has_location() {
  _has_bits_[0] &= ~0x00000004u;
}
void FieldLayout_Heliostat::clear_location() {
  if (location_ != NULL) location_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_location();
}
const ::energy_rec::FieldLayout_Vector& FieldLayout_Heliostat::location() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Heliostat.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_Heliostat::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Heliostat.location)
  return location_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_Heliostat::release_location() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Heliostat.location)
  clear_has_location();
  ::energy_rec::FieldLayout_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
void FieldLayout_Heliostat::set_allocated_location(::energy_rec::FieldLayout_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Heliostat.location)
}

// required .energy_rec.FieldLayout.Vector aim = 4;
bool FieldLayout_Heliostat::has_aim() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FieldLayout_Heliostat::set_has_aim() {
  _has_bits_[0] |= 0x00000008u;
}
void FieldLayout_Heliostat::clear_has_aim() {
  _has_bits_[0] &= ~0x00000008u;
}
void FieldLayout_Heliostat::clear_aim() {
  if (aim_ != NULL) aim_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_aim();
}
const ::energy_rec::FieldLayout_Vector& FieldLayout_Heliostat::aim() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Heliostat.aim)
  return aim_ != NULL ? *aim_ : *default_instance_->aim_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_Heliostat::mutable_aim() {
  set_has_aim();
  if (aim_ == NULL) {
    aim_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Heliostat.aim)
  return aim_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_Heliostat::release_aim() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Heliostat.aim)
  clear_has_aim();
  ::energy_rec::FieldLayout_Vector* temp = aim_;
  aim_ = NULL;
  return temp;
}
void FieldLayout_Heliostat::set_allocated_aim(::energy_rec::FieldLayout_Vector* aim) {
  delete aim_;
  aim_ = aim;
  if (aim) {
    set_has_aim();
  } else {
    clear_has_aim();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Heliostat.aim)
}

// optional .energy_rec.FieldLayout.EulerAnglesIntrinsicZXZ frame_orientation = 5;
bool FieldLayout_Heliostat::has_frame_orientation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FieldLayout_Heliostat::set_has_frame_orientation() {
  _has_bits_[0] |= 0x00000010u;
}
void FieldLayout_Heliostat::clear_has_frame_orientation() {
  _has_bits_[0] &= ~0x00000010u;
}
void FieldLayout_Heliostat::clear_frame_orientation() {
  if (frame_orientation_ != NULL) frame_orientation_->::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ::Clear();
  clear_has_frame_orientation();
}
const ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ& FieldLayout_Heliostat::frame_orientation() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Heliostat.frame_orientation)
  return frame_orientation_ != NULL ? *frame_orientation_ : *default_instance_->frame_orientation_;
}
::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* FieldLayout_Heliostat::mutable_frame_orientation() {
  set_has_frame_orientation();
  if (frame_orientation_ == NULL) {
    frame_orientation_ = new ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Heliostat.frame_orientation)
  return frame_orientation_;
}
::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* FieldLayout_Heliostat::release_frame_orientation() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Heliostat.frame_orientation)
  clear_has_frame_orientation();
  ::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* temp = frame_orientation_;
  frame_orientation_ = NULL;
  return temp;
}
void FieldLayout_Heliostat::set_allocated_frame_orientation(::energy_rec::FieldLayout_EulerAnglesIntrinsicZXZ* frame_orientation) {
  delete frame_orientation_;
  frame_orientation_ = frame_orientation;
  if (frame_orientation) {
    set_has_frame_orientation();
  } else {
    clear_has_frame_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Heliostat.frame_orientation)
}

// -------------------------------------------------------------------

// FieldLayout_Aperture

// required .energy_rec.FieldLayout.Vector location = 1;
bool FieldLayout_Aperture::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FieldLayout_Aperture::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void FieldLayout_Aperture::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void FieldLayout_Aperture::clear_location() {
  if (location_ != NULL) location_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_location();
}
const ::energy_rec::FieldLayout_Vector& FieldLayout_Aperture::location() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Aperture.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_Aperture::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Aperture.location)
  return location_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_Aperture::release_location() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Aperture.location)
  clear_has_location();
  ::energy_rec::FieldLayout_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
void FieldLayout_Aperture::set_allocated_location(::energy_rec::FieldLayout_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Aperture.location)
}

// required .energy_rec.FieldLayout.Vector normal = 2;
bool FieldLayout_Aperture::has_normal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FieldLayout_Aperture::set_has_normal() {
  _has_bits_[0] |= 0x00000002u;
}
void FieldLayout_Aperture::clear_has_normal() {
  _has_bits_[0] &= ~0x00000002u;
}
void FieldLayout_Aperture::clear_normal() {
  if (normal_ != NULL) normal_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_normal();
}
const ::energy_rec::FieldLayout_Vector& FieldLayout_Aperture::normal() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Aperture.normal)
  return normal_ != NULL ? *normal_ : *default_instance_->normal_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_Aperture::mutable_normal() {
  set_has_normal();
  if (normal_ == NULL) {
    normal_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Aperture.normal)
  return normal_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_Aperture::release_normal() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Aperture.normal)
  clear_has_normal();
  ::energy_rec::FieldLayout_Vector* temp = normal_;
  normal_ = NULL;
  return temp;
}
void FieldLayout_Aperture::set_allocated_normal(::energy_rec::FieldLayout_Vector* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    set_has_normal();
  } else {
    clear_has_normal();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Aperture.normal)
}

// required double radius = 3;
bool FieldLayout_Aperture::has_radius() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FieldLayout_Aperture::set_has_radius() {
  _has_bits_[0] |= 0x00000004u;
}
void FieldLayout_Aperture::clear_has_radius() {
  _has_bits_[0] &= ~0x00000004u;
}
void FieldLayout_Aperture::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
 double FieldLayout_Aperture::radius() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Aperture.radius)
  return radius_;
}
 void FieldLayout_Aperture::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.Aperture.radius)
}

// -------------------------------------------------------------------

// FieldLayout_Receiver

// required string type = 1;
bool FieldLayout_Receiver::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FieldLayout_Receiver::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FieldLayout_Receiver::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FieldLayout_Receiver::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& FieldLayout_Receiver::type() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Receiver.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FieldLayout_Receiver::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.Receiver.type)
}
 void FieldLayout_Receiver::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:energy_rec.FieldLayout.Receiver.type)
}
 void FieldLayout_Receiver::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:energy_rec.FieldLayout.Receiver.type)
}
 ::std::string* FieldLayout_Receiver::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Receiver.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FieldLayout_Receiver::release_type() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Receiver.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FieldLayout_Receiver::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Receiver.type)
}

// required .energy_rec.FieldLayout.Vector location = 2;
bool FieldLayout_Receiver::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FieldLayout_Receiver::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
void FieldLayout_Receiver::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
void FieldLayout_Receiver::clear_location() {
  if (location_ != NULL) location_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_location();
}
const ::energy_rec::FieldLayout_Vector& FieldLayout_Receiver::location() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Receiver.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_Receiver::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Receiver.location)
  return location_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_Receiver::release_location() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Receiver.location)
  clear_has_location();
  ::energy_rec::FieldLayout_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
void FieldLayout_Receiver::set_allocated_location(::energy_rec::FieldLayout_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Receiver.location)
}

// required .energy_rec.FieldLayout.Vector direction = 3;
bool FieldLayout_Receiver::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FieldLayout_Receiver::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
void FieldLayout_Receiver::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
void FieldLayout_Receiver::clear_direction() {
  if (direction_ != NULL) direction_->::energy_rec::FieldLayout_Vector::Clear();
  clear_has_direction();
}
const ::energy_rec::FieldLayout_Vector& FieldLayout_Receiver::direction() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Receiver.direction)
  return direction_ != NULL ? *direction_ : *default_instance_->direction_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_Receiver::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) {
    direction_ = new ::energy_rec::FieldLayout_Vector;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.Receiver.direction)
  return direction_;
}
::energy_rec::FieldLayout_Vector* FieldLayout_Receiver::release_direction() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.Receiver.direction)
  clear_has_direction();
  ::energy_rec::FieldLayout_Vector* temp = direction_;
  direction_ = NULL;
  return temp;
}
void FieldLayout_Receiver::set_allocated_direction(::energy_rec::FieldLayout_Vector* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.Receiver.direction)
}

// required int32 resolution = 4;
bool FieldLayout_Receiver::has_resolution() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FieldLayout_Receiver::set_has_resolution() {
  _has_bits_[0] |= 0x00000008u;
}
void FieldLayout_Receiver::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000008u;
}
void FieldLayout_Receiver::clear_resolution() {
  resolution_ = 0;
  clear_has_resolution();
}
 ::google::protobuf::int32 FieldLayout_Receiver::resolution() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.Receiver.resolution)
  return resolution_;
}
 void FieldLayout_Receiver::set_resolution(::google::protobuf::int32 value) {
  set_has_resolution();
  resolution_ = value;
  // @@protoc_insertion_point(field_set:energy_rec.FieldLayout.Receiver.resolution)
}

// -------------------------------------------------------------------

// FieldLayout

// required .energy_rec.FieldLayout.Sun sun = 1;
bool FieldLayout::has_sun() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FieldLayout::set_has_sun() {
  _has_bits_[0] |= 0x00000001u;
}
void FieldLayout::clear_has_sun() {
  _has_bits_[0] &= ~0x00000001u;
}
void FieldLayout::clear_sun() {
  if (sun_ != NULL) sun_->::energy_rec::FieldLayout_Sun::Clear();
  clear_has_sun();
}
const ::energy_rec::FieldLayout_Sun& FieldLayout::sun() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.sun)
  return sun_ != NULL ? *sun_ : *default_instance_->sun_;
}
::energy_rec::FieldLayout_Sun* FieldLayout::mutable_sun() {
  set_has_sun();
  if (sun_ == NULL) {
    sun_ = new ::energy_rec::FieldLayout_Sun;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.sun)
  return sun_;
}
::energy_rec::FieldLayout_Sun* FieldLayout::release_sun() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.sun)
  clear_has_sun();
  ::energy_rec::FieldLayout_Sun* temp = sun_;
  sun_ = NULL;
  return temp;
}
void FieldLayout::set_allocated_sun(::energy_rec::FieldLayout_Sun* sun) {
  delete sun_;
  sun_ = sun;
  if (sun) {
    set_has_sun();
  } else {
    clear_has_sun();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.sun)
}

// repeated .energy_rec.FieldLayout.HeliostatBlock heliostat_block = 2;
int FieldLayout::heliostat_block_size() const {
  return heliostat_block_.size();
}
void FieldLayout::clear_heliostat_block() {
  heliostat_block_.Clear();
}
const ::energy_rec::FieldLayout_HeliostatBlock& FieldLayout::heliostat_block(int index) const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.heliostat_block)
  return heliostat_block_.Get(index);
}
::energy_rec::FieldLayout_HeliostatBlock* FieldLayout::mutable_heliostat_block(int index) {
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.heliostat_block)
  return heliostat_block_.Mutable(index);
}
::energy_rec::FieldLayout_HeliostatBlock* FieldLayout::add_heliostat_block() {
  // @@protoc_insertion_point(field_add:energy_rec.FieldLayout.heliostat_block)
  return heliostat_block_.Add();
}
::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_HeliostatBlock >*
FieldLayout::mutable_heliostat_block() {
  // @@protoc_insertion_point(field_mutable_list:energy_rec.FieldLayout.heliostat_block)
  return &heliostat_block_;
}
const ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_HeliostatBlock >&
FieldLayout::heliostat_block() const {
  // @@protoc_insertion_point(field_list:energy_rec.FieldLayout.heliostat_block)
  return heliostat_block_;
}

// repeated .energy_rec.FieldLayout.Heliostat heliostat = 3;
int FieldLayout::heliostat_size() const {
  return heliostat_.size();
}
void FieldLayout::clear_heliostat() {
  heliostat_.Clear();
}
const ::energy_rec::FieldLayout_Heliostat& FieldLayout::heliostat(int index) const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.heliostat)
  return heliostat_.Get(index);
}
::energy_rec::FieldLayout_Heliostat* FieldLayout::mutable_heliostat(int index) {
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.heliostat)
  return heliostat_.Mutable(index);
}
::energy_rec::FieldLayout_Heliostat* FieldLayout::add_heliostat() {
  // @@protoc_insertion_point(field_add:energy_rec.FieldLayout.heliostat)
  return heliostat_.Add();
}
::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_Heliostat >*
FieldLayout::mutable_heliostat() {
  // @@protoc_insertion_point(field_mutable_list:energy_rec.FieldLayout.heliostat)
  return &heliostat_;
}
const ::google::protobuf::RepeatedPtrField< ::energy_rec::FieldLayout_Heliostat >&
FieldLayout::heliostat() const {
  // @@protoc_insertion_point(field_list:energy_rec.FieldLayout.heliostat)
  return heliostat_;
}

// optional .energy_rec.FieldLayout.Aperture aperture = 4;
bool FieldLayout::has_aperture() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FieldLayout::set_has_aperture() {
  _has_bits_[0] |= 0x00000008u;
}
void FieldLayout::clear_has_aperture() {
  _has_bits_[0] &= ~0x00000008u;
}
void FieldLayout::clear_aperture() {
  if (aperture_ != NULL) aperture_->::energy_rec::FieldLayout_Aperture::Clear();
  clear_has_aperture();
}
const ::energy_rec::FieldLayout_Aperture& FieldLayout::aperture() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.aperture)
  return aperture_ != NULL ? *aperture_ : *default_instance_->aperture_;
}
::energy_rec::FieldLayout_Aperture* FieldLayout::mutable_aperture() {
  set_has_aperture();
  if (aperture_ == NULL) {
    aperture_ = new ::energy_rec::FieldLayout_Aperture;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.aperture)
  return aperture_;
}
::energy_rec::FieldLayout_Aperture* FieldLayout::release_aperture() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.aperture)
  clear_has_aperture();
  ::energy_rec::FieldLayout_Aperture* temp = aperture_;
  aperture_ = NULL;
  return temp;
}
void FieldLayout::set_allocated_aperture(::energy_rec::FieldLayout_Aperture* aperture) {
  delete aperture_;
  aperture_ = aperture;
  if (aperture) {
    set_has_aperture();
  } else {
    clear_has_aperture();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.aperture)
}

// required .energy_rec.FieldLayout.Receiver receiver = 5;
bool FieldLayout::has_receiver() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FieldLayout::set_has_receiver() {
  _has_bits_[0] |= 0x00000010u;
}
void FieldLayout::clear_has_receiver() {
  _has_bits_[0] &= ~0x00000010u;
}
void FieldLayout::clear_receiver() {
  if (receiver_ != NULL) receiver_->::energy_rec::FieldLayout_Receiver::Clear();
  clear_has_receiver();
}
const ::energy_rec::FieldLayout_Receiver& FieldLayout::receiver() const {
  // @@protoc_insertion_point(field_get:energy_rec.FieldLayout.receiver)
  return receiver_ != NULL ? *receiver_ : *default_instance_->receiver_;
}
::energy_rec::FieldLayout_Receiver* FieldLayout::mutable_receiver() {
  set_has_receiver();
  if (receiver_ == NULL) {
    receiver_ = new ::energy_rec::FieldLayout_Receiver;
  }
  // @@protoc_insertion_point(field_mutable:energy_rec.FieldLayout.receiver)
  return receiver_;
}
::energy_rec::FieldLayout_Receiver* FieldLayout::release_receiver() {
  // @@protoc_insertion_point(field_release:energy_rec.FieldLayout.receiver)
  clear_has_receiver();
  ::energy_rec::FieldLayout_Receiver* temp = receiver_;
  receiver_ = NULL;
  return temp;
}
void FieldLayout::set_allocated_receiver(::energy_rec::FieldLayout_Receiver* receiver) {
  delete receiver_;
  receiver_ = receiver;
  if (receiver) {
    set_has_receiver();
  } else {
    clear_has_receiver();
  }
  // @@protoc_insertion_point(field_set_allocated:energy_rec.FieldLayout.receiver)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace energy_rec

// @@protoc_insertion_point(global_scope)
